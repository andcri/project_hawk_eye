/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 21.02.2024 21:36:36

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238528;
#else
constexpr int kTensorArenaSize = 237504;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 40931, -47908, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00012096154387108982, 0.00010182031110161915, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 60,-45,-44,72,-17,12,-33,42,127,26,-50,-33,-19,49,-31,4,98,-84,-33,-69,71,37,67,-63,-32,-32,15,64,10,-21,3,50, 
  /* [1][0][][] */ 43,75,72,-55,-76,72,-5,18,-46,-43,41,104,103,44,40,5,-34,8,-55,-81,-68,41,20,106,83,61,-84,-2,89,-127,-110,-12, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0046480908058583736, 0.0039125662297010422, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -604, 363, 385, -498, 81, 408, -469, 366, 176, 1399, 323, 374, 293, 367, 331, -495, -332, -271, -337, -368, -473, 412, -695, 361, 104, 44, 1283, -238, -585, 819, 0, -442, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.2456929552135989e-05, 5.5850836361059919e-05, 5.2490984671749175e-05, 5.2537412557285279e-05, 5.1177765271859244e-05, 5.5110416724346578e-05, 5.4597461712546647e-05, 5.8708581491373479e-05, 5.9520767536014318e-05, 5.6765929912216961e-05, 6.5302214352414012e-05, 5.8034842368215322e-05, 5.3724401368526742e-05, 5.8817342505790293e-05, 5.6406501244055107e-05, 5.2278457587817684e-05, 6.0117414250271395e-05, 6.6961853008251637e-05, 5.0539201765786856e-05, 5.2085080824326724e-05, 4.804676427738741e-05, 5.3220173867885023e-05, 5.7003271649591625e-05, 5.7382942031836137e-05, 5.9732967201853171e-05, 5.7443809055257589e-05, 6.8940404162276536e-05, 5.1963703299406916e-05, 5.4561271099373698e-05, 5.6153010518755764e-05, 7.3201081249862909e-05, 5.5280866945395246e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -55,-59,92,-5,89,-29,-95,-117,62,-104,-116,-11,43,1,-51,47,-61,-47,-75,-73,-75,-121,-11,97,-120,-1,63,-55,105,-4,-31,-94,71,-72,-112,50,-127,-96,-103,20,68,-98,-117,88,50,-117,107,-33, 
  /* [1][0][][] */ -49,42,-57,8,-24,92,52,12,103,-83,-85,109,74,-15,37,78,79,-37,47,127,-35,3,41,38,60,31,-71,124,24,22,104,-53,27,114,-5,35,59,73,-11,-62,-50,24,-15,-115,-23,41,-37,-65, 
  /* [2][0][][] */ 55,49,-51,107,-7,-48,108,102,-77,106,-20,126,104,-5,99,-101,-89,-25,48,69,-89,-7,121,33,2,97,77,30,-57,100,89,109,-104,-9,-92,-103,-80,112,112,-27,-110,-61,22,-28,-76,127,-34,-92, 
  /* [3][0][][] */ 68,-1,32,-30,-82,43,-127,28,37,9,59,-7,87,89,66,9,107,91,-68,5,109,-100,-77,-125,-39,-126,-88,98,36,-116,79,-1,-59,-42,-25,-25,-105,-34,37,46,-34,-94,-111,0,65,15,-68,-94, 
  /* [4][0][][] */ 52,111,-2,63,-32,-31,27,22,43,84,-24,58,37,-42,-20,-68,-17,0,-77,14,117,-91,98,30,-44,-10,80,-77,-50,27,-70,-57,97,127,29,-104,-51,-11,-99,58,-53,-73,-76,-88,25,112,35,79, 
  /* [5][0][][] */ 102,-77,88,91,54,-101,42,59,127,-98,15,-58,33,108,48,49,34,64,-59,108,42,60,23,-16,-76,-47,-40,-71,61,46,25,-87,-65,13,-64,24,-103,-22,50,30,-75,-35,47,81,-21,31,42,-59, 
  /* [6][0][][] */ 11,-52,104,67,-92,-71,-10,57,-22,-88,0,-95,77,47,106,-125,40,-5,-7,93,-84,-126,101,50,-65,-89,-18,-65,-35,-119,40,-84,-101,-127,-53,-111,-17,32,-114,73,78,47,16,-22,-117,97,-89,-52, 
  /* [7][0][][] */ 116,69,-24,-31,-55,116,-5,4,127,19,-76,21,60,-71,55,80,36,20,10,116,60,41,2,89,-49,105,25,66,-61,112,-10,43,8,32,66,102,-89,93,-4,-23,98,-60,88,50,59,5,95,-109, 
  /* [8][0][][] */ 19,32,-44,-84,50,19,-80,-12,-10,32,40,96,4,-37,-81,-77,-30,100,-59,12,27,-18,84,94,-117,83,82,56,-71,13,-73,106,127,-36,51,6,111,-2,-8,72,75,77,-95,-78,0,-6,5,122, 
  /* [9][0][][] */ 50,27,122,52,86,-92,-67,-64,25,60,-15,81,-11,-53,-87,-36,79,51,-74,-56,10,127,-60,-81,109,-1,50,12,-25,-61,-59,120,119,-2,66,12,-46,13,-5,-28,59,-62,90,-31,98,57,-67,108, 
  /* [10][0][][] */ -45,78,88,-47,0,99,104,26,56,43,37,-50,93,78,-16,22,-48,69,-70,-41,-6,31,51,-48,52,58,-127,-76,-28,82,-71,-58,40,93,102,67,-26,18,-26,32,-19,113,-87,-50,-68,-43,-7,-64, 
  /* [11][0][][] */ 111,21,-2,107,124,55,65,33,127,102,-57,113,4,-68,39,-48,-71,-92,72,49,40,79,29,-92,-75,-75,-43,84,88,9,33,-8,-108,-56,54,51,-50,84,-23,-50,-13,114,-62,-11,-27,-48,-81,-91, 
  /* [12][0][][] */ 17,77,-43,10,102,21,-18,37,-48,80,7,19,-37,23,63,-66,-121,-35,-36,-70,37,-4,20,110,-44,-37,74,-78,108,31,-31,127,-115,-59,-46,21,4,-60,-19,43,126,58,-106,-62,-15,-84,-58,101, 
  /* [13][0][][] */ 109,-48,106,99,99,117,89,64,88,-80,25,-18,94,77,74,-32,-127,-61,-54,38,73,-17,116,-33,-40,49,-15,34,-68,-68,84,45,16,107,-14,43,-69,-14,27,66,-48,85,-40,-4,-29,34,-5,-34, 
  /* [14][0][][] */ -53,-82,97,78,90,-16,1,-112,-53,-20,83,85,-18,-69,-74,-67,-92,-60,23,36,-31,40,4,71,-85,-55,-69,48,-95,-97,-69,48,62,-9,-29,12,101,127,37,-106,7,-90,40,63,70,-114,49,-95, 
  /* [15][0][][] */ 10,-42,-39,64,87,-102,54,-110,56,-7,-79,1,99,-5,-102,-127,93,2,-103,15,42,10,67,102,73,60,47,85,11,51,63,-113,9,-5,-77,-12,-79,108,105,-78,8,102,-58,-45,22,-86,-39,-93, 
  /* [16][0][][] */ -68,-10,82,-64,25,89,-63,34,21,29,-112,59,-21,-53,-59,-67,127,70,54,48,91,65,-38,37,-57,37,-28,38,-104,-3,32,2,-59,59,48,48,-39,36,-46,-62,11,-60,60,103,49,89,102,0, 
  /* [17][0][][] */ 23,-71,34,70,-12,-71,-30,-91,79,-42,99,41,91,58,-77,60,-10,25,99,106,-64,-14,-5,-30,65,80,-101,58,108,-14,-30,72,-63,-8,17,-7,-38,97,-92,-28,-67,2,-26,-47,10,3,58,-127, 
  /* [18][0][][] */ -107,100,108,-81,-16,-125,-119,1,-13,71,-124,-57,-41,29,58,-67,46,-31,55,-32,102,-56,16,-90,26,-108,-16,112,24,30,-6,40,47,-37,-119,-121,-42,27,-41,65,-50,-6,-61,-14,-127,13,34,-10, 
  /* [19][0][][] */ 16,27,74,35,55,-92,95,90,91,-70,25,-16,-102,30,-62,58,87,-112,108,55,-27,79,-62,9,75,-86,52,-74,-99,-127,-71,43,102,-90,31,-6,5,-76,-61,-107,42,-125,-90,12,-93,27,82,-98, 
  /* [20][0][][] */ -20,73,69,99,-108,92,11,58,1,4,-107,-4,-17,89,34,-90,-57,-47,-84,-45,18,-58,-92,-90,69,-93,-109,39,15,2,-51,117,127,43,-23,56,38,-46,-20,-123,-103,-56,-107,-120,-38,-78,-57,120, 
  /* [21][0][][] */ 103,84,85,-95,111,-66,89,22,19,-50,-59,50,15,49,-40,-80,-127,-27,39,-3,120,-42,78,-74,78,-76,-59,92,28,19,0,-12,-22,31,-89,-108,121,111,-115,-32,3,22,37,-35,-89,-78,-88,85, 
  /* [22][0][][] */ 13,-52,-83,-106,82,-68,98,37,-90,84,-72,-111,92,-107,-117,-87,24,64,-116,-72,69,-85,14,14,88,-7,-127,96,-69,-83,-67,-120,29,46,0,-5,-5,-20,-72,-111,-5,-22,-15,81,51,-120,86,-37, 
  /* [23][0][][] */ 66,-76,16,63,104,-97,18,-94,77,-60,96,77,26,-92,30,-26,57,-31,-90,106,97,-70,102,-23,9,-1,44,39,79,60,73,-27,-73,51,22,38,100,6,-104,6,-90,16,15,-127,-56,-82,97,12, 
  /* [24][0][][] */ -65,-62,-85,-60,-67,-88,-46,-83,88,127,91,43,108,68,-23,-112,-104,38,36,-37,95,-72,-53,-30,72,-18,44,76,110,66,7,-52,-29,13,41,30,-45,-66,48,-24,-63,-85,99,-16,31,-27,38,49, 
  /* [25][0][][] */ -80,-76,-69,-9,93,-58,-82,51,68,-89,-26,18,71,4,-95,-16,-102,53,39,-97,69,79,-16,-51,34,-46,-127,58,82,-71,36,112,57,-104,37,68,91,-47,-28,-25,-78,103,-98,-22,101,42,54,16, 
  /* [26][0][][] */ 71,-77,3,17,-72,5,-18,17,-110,-97,74,100,-45,-16,21,-17,120,64,-45,-34,31,89,116,23,18,55,43,21,9,3,-45,19,9,-28,-42,-47,-22,73,-1,98,-62,71,78,59,-43,80,-10,127, 
  /* [27][0][][] */ 10,25,-67,-107,-127,-76,-80,-23,34,98,36,-110,-24,55,80,-28,101,-18,62,-90,-105,10,-32,-25,-111,54,-103,-5,64,24,-37,-15,79,72,-78,-94,-93,-71,-117,93,-100,21,25,25,99,22,68,108, 
  /* [28][0][][] */ 76,-18,73,30,-127,-76,-107,-87,-41,-116,49,55,-93,-99,-9,86,79,97,-83,60,-40,9,-122,-87,-127,67,-98,-72,-86,-84,-15,-32,-117,2,65,58,3,-119,-56,16,89,30,-106,37,-115,-23,1,32, 
  /* [29][0][][] */ 66,81,69,-18,-62,19,-114,19,83,-10,-80,-60,117,-81,-34,-36,-60,125,38,-47,-60,-6,82,13,-36,33,-10,-23,-93,-4,125,14,84,26,-51,-35,18,110,15,127,71,96,-26,112,8,113,-25,10, 
  /* [30][0][][] */ 19,0,-37,57,-22,40,-48,-11,80,-13,-4,-20,-43,16,49,50,12,25,64,-43,19,-68,-82,49,-63,67,-42,102,18,-89,-70,12,-35,-36,-58,-47,23,-13,-3,69,79,-18,-12,127,74,-36,72,46, 
  /* [31][0][][] */ 76,-101,28,91,40,55,-68,-103,-38,-26,-86,-94,90,-127,-55,99,-52,-93,30,40,55,28,-36,96,34,-122,78,29,-81,-81,40,99,55,12,-96,-13,88,-39,-73,-116,50,-80,-36,36,0,-57,-39,23, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0022294195368885994, 0.0023736604489386082, 0.0022308668121695518, 0.0022328400518745184, 0.0021750549785792828, 0.0023421926889568567, 0.002320392057299614, 0.0024951146915555, 0.0025296325329691172, 0.0024125520139932632, 0.0027753440663218498, 0.0024664807133376598, 0.002283287001773715, 0.0024997370783239603, 0.0023972762282937765, 0.0022218343801796436, 0.0025549901183694601, 0.0028458787128329277, 0.0021479160059243441, 0.0022136159241199493, 0.0020419873762875795, 0.0022618572693318129, 0.0024226389359682798, 0.0024387750308960676, 0.0025386509951204062, 0.0024413617793470621, 0.0029299671296030283, 0.0022084573283791542, 0.0023188539780676365, 0.0023865029215812683, 0.0031110458076000214, 0.0023494367487728596, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { 1883, -1116, 5304, 2500, 2719, -23, 2315, 3287, -2074, -1399, -1052, 8188, 3205, 3050, 5970, -4411, -2370, 5824, 2756, 6001, 3455, 22692, 22538, 961, -1800, 1780, -402, -801, 2229, 1828, 6043, 6116, -650, 467, 6076, 3006, 7251, 2169, 1345, -1401, 4385, -2259, 5995, -91, 202, 1821, -2085, 4379, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00019858442828990519, 0.00032049298170022666, 0.00013828431838192046, 0.00022426397481467575, 0.00019256684754509479, 0.00017633987590670586, 0.00015252867888193578, 0.00022740292479284108, 0.00019887146481778473, 0.00026074334164150059, 0.0002904343418776989, 9.5842595328576863e-05, 0.00020598323317244649, 0.00018122157780453563, 0.00014880586240906268, 0.00013341725571081042, 0.00022783462191000581, 0.00016513698210474104, 0.00021048945200163871, 0.00013135513290762901, 0.00023028851137496531, 4.7845020162640139e-05, 4.4461390643846244e-05, 0.00019531733414623886, 0.00023208970378618687, 0.00014101061969995499, 0.00018596279551275074, 0.00023482825781684369, 0.00019967221305705607, 0.00023687520297244191, 0.0001120464876294136, 0.00014056806685402989, 0.00021013990044593811, 0.00025058756000362337, 0.00014298675523605198, 0.00019995674665551633, 0.00011371285654604435, 0.00027986086206510663, 0.00022179353982210159, 0.00023619932471774518, 0.00012729888840112835, 0.00020047047291882336, 0.00014735940203536302, 0.00037129558040760458, 0.00026832389994524419, 0.00029889642610214651, 0.00021972751710563898, 0.00017181341536343098, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ -3,19,127,-10,-10,47,1,-80, 
  /* [1][0][][] */ 82,-70,63,-82,-11,-65,127,29, 
  /* [2][0][][] */ 51,55,77,-73,-62,26,127,-19, 
  /* [3][0][][] */ 13,34,8,-15,12,-58,127,12, 
  /* [4][0][][] */ 127,-34,-46,-28,-98,-62,-20,62, 
  /* [5][0][][] */ 20,67,127,-3,27,-44,26,-45, 
  /* [6][0][][] */ 127,106,-18,124,-87,33,14,95, 
  /* [7][0][][] */ -24,-4,-2,39,30,-118,-127,-35, 
  /* [8][0][][] */ 126,81,-39,92,-73,25,-127,-49, 
  /* [9][0][][] */ 127,-25,-40,42,5,-41,17,-78, 
  /* [10][0][][] */ 87,34,-1,20,-38,127,42,8, 
  /* [11][0][][] */ 127,-14,-8,-105,83,-62,-48,79, 
  /* [12][0][][] */ -45,117,82,-32,6,62,-83,127, 
  /* [13][0][][] */ 127,-4,-95,7,33,-83,23,-89, 
  /* [14][0][][] */ 104,35,1,-13,-127,24,-71,-16, 
  /* [15][0][][] */ 19,3,-116,-44,-127,-70,113,115, 
  /* [16][0][][] */ 0,-60,115,-9,127,-43,-55,-28, 
  /* [17][0][][] */ 13,-24,79,-16,127,-56,-59,-4, 
  /* [18][0][][] */ 111,-47,127,44,-25,36,-46,-8, 
  /* [19][0][][] */ 89,58,56,-66,-51,-127,23,-42, 
  /* [20][0][][] */ 52,-28,51,127,2,-60,-72,79, 
  /* [21][0][][] */ 101,-13,-75,-127,56,-55,3,104, 
  /* [22][0][][] */ -28,-127,-75,-54,47,-19,124,-74, 
  /* [23][0][][] */ -17,15,28,-46,-101,-127,3,-29, 
  /* [24][0][][] */ 127,1,54,44,-5,-23,-102,77, 
  /* [25][0][][] */ 99,45,-32,-93,-8,0,-42,127, 
  /* [26][0][][] */ -93,-27,31,-127,106,1,-48,-96, 
  /* [27][0][][] */ 102,127,-1,-43,3,52,30,2, 
  /* [28][0][][] */ 41,127,0,17,-6,-35,-12,97, 
  /* [29][0][][] */ 127,31,89,109,37,-35,-110,50, 
  /* [30][0][][] */ 127,-92,-68,105,41,5,-65,88, 
  /* [31][0][][] */ 91,-83,21,49,-78,-99,-127,55, 
  /* [32][0][][] */ -87,-65,33,-127,75,-16,-26,-74, 
  /* [33][0][][] */ 34,11,30,33,23,-64,127,47, 
  /* [34][0][][] */ -56,76,105,-73,127,-70,-96,92, 
  /* [35][0][][] */ -43,33,17,125,-12,127,40,-20, 
  /* [36][0][][] */ 89,29,-29,-127,46,-5,20,44, 
  /* [37][0][][] */ 44,49,-7,12,-79,127,64,42, 
  /* [38][0][][] */ -9,-80,19,111,24,67,-5,127, 
  /* [39][0][][] */ 14,-1,-127,37,-5,-39,-26,60, 
  /* [40][0][][] */ 49,7,-94,-4,-39,54,-57,127, 
  /* [41][0][][] */ 48,7,25,-45,-120,-127,-12,-3, 
  /* [42][0][][] */ -84,51,-87,99,-6,91,-32,-127, 
  /* [43][0][][] */ 2,6,-27,-127,-19,7,2,-69, 
  /* [44][0][][] */ 52,16,16,56,29,127,-52,36, 
  /* [45][0][][] */ -7,69,-28,13,127,-35,-72,-7, 
  /* [46][0][][] */ 63,-62,10,127,65,27,-45,74, 
  /* [47][0][][] */ -27,-82,50,-10,127,10,48,20, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0023989735636860132, 0.0038716741837561131, 0.0016705258749425411, 0.0027091919910162687, 0.0023262789472937584, 0.002130251144990325, 0.0018426030874252319, 0.0027471117209643126, 0.0024024411104619503, 0.0031498761381953955, 0.0035085545387119055, 0.0011578140547499061, 0.002488353755325079, 0.002189223887398839, 0.0017976299859583378, 0.0016117298509925604, 0.0027523266617208719, 0.0019949160050600767, 0.002542790723964572, 0.0015868187183514237, 0.0027819706592708826, 0.00057798560010269284, 0.00053711008513346314, 0.0023595057427883148, 0.0028037296142429113, 0.0017034605843946338, 0.00224649952724576, 0.0028368125203996897, 0.002412114292383194, 0.0028615402989089489, 0.0013535631587728858, 0.0016981144435703754, 0.0025385678745806217, 0.0030271906871348619, 0.0017273329431191087, 0.002415551571175456, 0.0013736934633925557, 0.0033808229491114616, 0.002679348224774003, 0.002853375393897295, 0.0015378177631646395, 0.0024217576719820499, 0.0017801562789827585, 0.0044853882864117622, 0.0032414523884654045, 0.0036107797641307116, 0.0026543899439275265, 0.0020755697041749954, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -10760, -3015, 526, -12838, 1299, -1681, 11873, 10945, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.00020470056915655732, 0.00017476463108323514, 7.0501133450306952e-05, 0.0001329592487309128, 0.00015410449123010039, 0.00013531786680687219, 0.00010212668712483719, 0.00011360445205355063, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 127,-22,20,-25,15,57,13,43,121,-89,56,20,-47,64,20,-54,13,-28,-18,-16,-2,-55,4,-30,-48,-26,-46,-42,-32,90,-17,36,24,-44,14,-34,59,-58,-54,18,22,-22,-81,-1,49,-34,52,-39, 
  /* [1][0][][] */ 48,-2,-10,64,46,62,22,38,74,-82,-1,12,37,20,-40,-20,-37,-39,-64,-4,-4,-52,47,72,2,-55,-10,37,-28,63,-48,127,-24,41,-26,-29,-56,-10,-10,-16,-51,-23,-43,40,13,-11,8,-84, 
  /* [2][0][][] */ -44,-23,-83,43,-77,-23,-2,46,-93,-91,-90,-20,-40,42,-127,-13,77,-93,38,-11,107,74,-29,-8,56,87,13,-100,-54,13,64,9,-34,33,61,-74,69,-5,78,107,-52,94,35,-8,-89,54,-34,61, 
  /* [3][0][][] */ 8,-17,-9,42,-35,-1,-10,58,92,114,-127,-25,22,-21,-27,77,-71,-8,0,49,-38,7,81,13,9,21,-62,57,-36,36,-33,-31,20,29,35,13,61,-1,47,12,-52,91,70,26,19,-17,-40,-34, 
  /* [4][0][][] */ -22,-67,19,-49,12,79,-58,-61,-9,-40,67,24,-48,-20,-13,34,60,14,-31,35,-53,-18,106,-8,-93,-18,-1,15,24,-34,-18,59,-44,45,-18,52,-29,31,-2,3,-28,37,-23,34,127,53,-11,6, 
  /* [5][0][][] */ -61,-66,57,-127,-23,18,-38,-56,-11,73,-49,61,-74,23,50,14,70,51,64,14,35,2,-11,-59,38,-71,4,-44,-10,-41,34,-76,-6,-38,57,-1,-21,27,34,53,94,11,21,-25,-7,-5,-27,35, 
  /* [6][0][][] */ -66,-62,41,34,-60,-51,5,-66,-87,7,-127,39,11,-51,43,13,-27,12,21,117,-20,-12,72,43,-71,-15,50,14,13,-23,-30,-61,-36,53,54,-94,-32,74,50,-23,-73,53,70,-63,-12,-46,-30,-4, 
  /* [7][0][][] */ 25,-3,15,-10,6,31,-44,-39,-127,-28,106,35,1,-31,30,-3,11,49,8,-27,-58,7,-15,-51,43,14,-47,10,-12,-12,-22,-54,-108,-61,-43,-2,68,-26,-30,12,59,-2,42,-20,9,-51,41,23, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0086997738108038902, 0.0074274963699281216, 0.0029962980188429356, 0.005650768056511879, 0.0065494407899677753, 0.0057510090991854668, 0.0043403841555118561, 0.0048281890340149403, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { -1604, -1121, 9350, -456, -2176, -6040, -3720, 9049, 6009, -2836, -2482, -6043, 71, 13806, 6292, 157, 3827, -4794, 5051, -870, 12065, -3599, -960, -1189, 3315, -5504, -560, -2174, 5134, -24259, -1665, -1171, -2558, -380, -575, -1749, 9486, -4693, 183, -10425, -73, 4275, -4440, -1770, 3036, -1580, 7573, -3585, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00031381062581203878, 0.0002080922422464937, 0.00011579759302549064, 0.00013216056686360389, 0.0002132806257577613, 0.00013980064250063151, 0.00028366644983179867, 0.00018034421373158693, 0.00017583533190190792, 0.00044094849727116525, 0.00035962680703960359, 8.368057751795277e-05, 0.00033130068914033473, 9.9807060905732214e-05, 0.00019036496814806014, 0.00027949275681748986, 0.00012470049841795117, 0.00011540493869688362, 0.0001765987544786185, 0.00040818602428771555, 9.9559823866002262e-05, 0.00016742580919526517, 0.00025653690681792796, 0.00025940709747374058, 0.00018373050261288881, 0.00023913862241897732, 0.00029981951229274273, 0.00043725853902287781, 0.00015440583229064941, 9.4604940386489034e-05, 0.00022895802976563573, 0.00020249719091225415, 9.7366268164478242e-05, 0.00038178602699190378, 0.00011210374941583723, 0.00016411479737143964, 0.00014077963714953512, 8.1568447058089077e-05, 8.9283828856423497e-05, 0.0001113772887038067, 0.00027079018764197826, 0.00018158505554310977, 0.00034093743306584656, 0.00018778294906951487, 0.00017374825256410986, 0.00011643827747320756, 0.00015104387421160936, 0.00017507997108623385, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 77,77,-11,48,5,-4,-38,19,42,-66,33,11,7,-125,-31,34,127,40,-80,-2,91,25,-21,-13,68,26,29,-2,-77,51,-18,-55,123,14,120,35,-53,10,127,28,-76,73,-107,-50,25,-105,-35,4, 110,127,-64,90,23,49,-53,-127,51,40,127,34,-23,-35,-19,-18,-62,127,-100,26,66,127,37,-22,23,5,15,127,-127,124,-30,-127,-16,-30,35,103,-87,127,122,34,-127,-71,81,-7,8,31,-127,91, 52,54,-2,46,10,-1,-24,32,39,-66,27,15,4,-84,-23,-21,121,-13,-40,-16,87,42,-30,46,50,71,22,-2,-15,23,-25,-32,127,5,98,22,-31,21,110,-6,-49,70,57,65,27,88,23,-28, 
  /* [0][1][][] */ -25,-49,-127,100,26,54,70,-26,32,42,-48,127,127,-10,-20,-76,-28,86,71,-20,-100,17,32,-105,27,49,19,11,3,116,15,58,55,127,17,49,-75,-14,-74,83,80,5,79,-109,6,-108,-13,127, 38,-99,-38,-127,127,14,127,-74,-127,127,2,69,-111,127,127,-28,-121,89,8,127,26,-17,127,-6,-127,127,41,-83,-83,51,-127,112,77,-102,21,127,127,88,-31,127,119,-64,-15,5,106,-47,-9,60, -19,-39,-118,69,-10,127,54,-12,37,33,-44,74,-21,18,-29,-18,-67,99,127,-49,-127,34,-63,127,7,34,20,32,57,88,30,44,7,-16,-53,-120,-42,-12,-5,24,41,71,-14,127,-14,118,-32,92, 
  /* [0][2][][] */ -35,-18,0,29,-6,20,0,5,31,-36,3,7,26,-81,-30,37,117,-6,7,1,-54,39,-11,-5,25,-14,-7,-5,31,2,32,14,42,13,127,7,-10,75,109,39,9,68,127,-17,-58,-127,-14,-1, -127,-3,-87,49,-118,13,-43,-9,19,84,-85,48,-26,-32,-9,127,-87,36,-108,-36,-65,24,-6,-32,-15,60,-127,-33,-28,127,58,31,48,-27,19,51,-20,73,-63,60,-69,-127,-102,-26,-127,62,-104,115, -29,-20,4,23,15,5,0,3,25,-59,-13,-19,-13,-72,-17,8,122,-44,92,11,-64,13,-4,33,19,-5,-8,-11,43,-15,28,15,63,2,75,29,-3,78,121,3,12,74,-50,54,-38,87,-12,-40, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.013336950913071632, 0.0088439201936125755, 0.0049213976599276066, 0.0056168236769735813, 0.0090644266456365585, 0.0059415269643068314, 0.01205582357943058, 0.0076646287925541401, 0.0074730012565851212, 0.01874031126499176, 0.015284138731658459, 0.0035564245190471411, 0.01408027857542038, 0.0042417999356985092, 0.0080905109643936157, 0.011878442019224167, 0.0052997712045907974, 0.0049047097563743591, 0.0075054471381008625, 0.017347905784845352, 0.0042312922887504101, 0.0071155969053506851, 0.010902818292379379, 0.011024801060557365, 0.00780854607000947, 0.010163391008973122, 0.012742328457534313, 0.018583487719297409, 0.0065622478723526001, 0.0040207100100815296, 0.009730716235935688, 0.0086061302572488785, 0.0041380664333701134, 0.01622590608894825, 0.0047644092701375484, 0.0069748787209391594, 0.0059831347316503525, 0.0034666589926928282, 0.0037945627700537443, 0.0047335345298051834, 0.011508582159876823, 0.0077173644676804543, 0.014489840716123581, 0.0079807750880718231, 0.0073843006975948811, 0.0049486267380416393, 0.0064193648286163807, 0.0074408985674381256, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { 31829, 5969, 1434, 1593, 4581, 3043, 7403, 3446, 2511, -6341, 10793, 1000, 9066, 1816, 4338, 2964, 6088, -889, 12357, 353, 2742, -362, 4634, 7842, 2935, -3500, 2090, 14596, 799, 6189, 2141, 12031, 859, 5518, -558, -1541, 2446, 2384, 201, 1313, 15984, -1056, 13610, 3496, 1788, 5905, 4751, -1198, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 3.3409905881853774e-05, 0.0001381461916025728, 0.00019941454229410738, 0.0001621893752599135, 0.00015888203051872551, 0.0001652036007726565, 9.925399353960529e-05, 0.00018730871670413762, 0.00018765730783343315, 0.0001131909666582942, 8.8635359134059399e-05, 0.00021552486578002572, 8.9573251898400486e-05, 0.00019083646475337446, 0.00016100170614663512, 0.0001358211156912148, 0.00011759179324144498, 0.00018392382480669767, 7.6450451160781085e-05, 0.00014605763135477901, 0.00022692848870065063, 0.00022819238074589521, 0.00012640673958230764, 9.286277781939134e-05, 0.0001537577627459541, 0.00016713788500055671, 0.00018830645421985537, 6.7047963966615498e-05, 0.00021558109438046813, 0.00011687407823046669, 0.00017084421415347606, 7.6859076216351241e-05, 0.00016422674525529146, 0.0001367864606436342, 0.00016724654415156692, 0.00021257837943267077, 0.00021851508063264191, 0.00014156197721604258, 0.00019326957408338785, 0.00021608125825878233, 5.9699152188841254e-05, 0.0001682143920334056, 6.3263760239351541e-05, 0.00012112788681406528, 0.00014003372052684426, 0.00013714184751734138, 0.00012479363067541271, 0.00024945684708654881, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -127,48,-21,-13,89,50,-6,-64, 
  /* [1][0][][] */ -3,-51,-29,-9,-58,-127,9,11, 
  /* [2][0][][] */ -56,73,0,-48,-54,44,-50,127, 
  /* [3][0][][] */ 76,51,52,-15,-63,-127,50,-19, 
  /* [4][0][][] */ 20,59,-127,36,-124,98,43,29, 
  /* [5][0][][] */ -21,55,35,-37,-96,-127,-56,-9, 
  /* [6][0][][] */ -62,127,98,-44,-87,-42,33,-31, 
  /* [7][0][][] */ -13,-12,30,52,8,-127,-11,47, 
  /* [8][0][][] */ 127,20,-76,60,-83,-56,-95,-2, 
  /* [9][0][][] */ 103,-33,-60,-66,-1,-29,-36,127, 
  /* [10][0][][] */ -83,8,2,127,7,74,21,-98, 
  /* [11][0][][] */ 27,16,59,-25,12,121,127,104, 
  /* [12][0][][] */ -75,-93,-46,-90,127,-37,-16,35, 
  /* [13][0][][] */ -41,-2,-3,47,28,-127,41,56, 
  /* [14][0][][] */ 85,82,109,27,60,-127,-84,-22, 
  /* [15][0][][] */ -38,66,127,69,4,12,38,-77, 
  /* [16][0][][] */ -95,-39,43,-77,127,9,-46,-7, 
  /* [17][0][][] */ 46,-49,-45,-6,-10,127,-27,50, 
  /* [18][0][][] */ -22,127,84,-45,-57,56,73,-86, 
  /* [19][0][][] */ 9,104,77,127,-34,23,42,31, 
  /* [20][0][][] */ 8,-3,62,-127,-52,5,52,-17, 
  /* [21][0][][] */ -79,81,32,-107,98,44,127,10, 
  /* [22][0][][] */ 86,-42,-108,65,65,-48,-67,127, 
  /* [23][0][][] */ 35,-81,-127,-44,60,-15,-60,98, 
  /* [24][0][][] */ 43,-16,-91,25,-71,41,-127,126, 
  /* [25][0][][] */ -3,-13,50,18,127,-8,-81,-49, 
  /* [26][0][][] */ 4,93,127,-43,-34,-7,46,-62, 
  /* [27][0][][] */ -44,33,121,-68,18,9,96,-127, 
  /* [28][0][][] */ 59,-12,86,127,66,-21,30,94, 
  /* [29][0][][] */ 83,91,114,25,-68,42,-127,97, 
  /* [30][0][][] */ 57,-12,-105,85,-127,-49,-52,55, 
  /* [31][0][][] */ 14,127,99,-77,-94,34,126,-117, 
  /* [32][0][][] */ 61,-10,-14,23,112,127,40,-24, 
  /* [33][0][][] */ 20,-37,-127,16,27,-21,-37,74, 
  /* [34][0][][] */ 19,-54,27,-127,-2,68,-17,9, 
  /* [35][0][][] */ -23,24,75,5,11,-127,9,-21, 
  /* [36][0][][] */ -14,16,-33,-127,-7,9,8,-48, 
  /* [37][0][][] */ 58,-19,-24,-96,-75,127,-66,-83, 
  /* [38][0][][] */ 74,-59,-28,92,68,25,-28,127, 
  /* [39][0][][] */ 127,89,29,69,-7,86,-47,-7, 
  /* [40][0][][] */ 41,-108,-127,-25,4,6,-50,109, 
  /* [41][0][][] */ -19,-66,-127,-99,4,-70,-51,-18, 
  /* [42][0][][] */ 53,109,85,127,-68,-29,25,44, 
  /* [43][0][][] */ 127,-37,-120,-125,-79,-58,43,62, 
  /* [44][0][][] */ -3,85,116,-86,-104,-10,85,-127, 
  /* [45][0][][] */ 47,32,-127,67,-42,42,13,86, 
  /* [46][0][][] */ 40,-49,-77,-127,25,-41,-40,50, 
  /* [47][0][][] */ 94,-113,127,-61,71,-31,19,14, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.00053698482224717736, 0.0022203715052455664, 0.0032051147427409887, 0.0026068086735904217, 0.002553650876507163, 0.0026552551425993443, 0.001595271984115243, 0.0030105423647910357, 0.0030161449685692787, 0.0018192756688222289, 0.0014246026985347271, 0.0034640498925000429, 0.0014396770857274532, 0.0030672424472868443, 0.0025877195876091719, 0.0021830014884471893, 0.0018900084542110562, 0.0029561382252722979, 0.0012287591816857457, 0.0023475291673094034, 0.0036473358049988747, 0.0036676500458270311, 0.002031687879934907, 0.0014925483847036958, 0.0024712905287742615, 0.0026863440871238708, 0.0030265785753726959, 0.0010776366107165813, 0.0034649535082280636, 0.0018784729763865471, 0.0027459145057946444, 0.0012353268684819341, 0.0026395544409751892, 0.0021985170897096395, 0.0026880905497819185, 0.0034166919067502022, 0.0035121103283017874, 0.0022752722725272179, 0.0031063489150255919, 0.0034729924518615007, 0.00095952191622927785, 0.0027036464307457209, 0.0010168144945055246, 0.0019468427635729313, 0.0022507091052830219, 0.0022042291238903999, 0.0020057607907801867, 0.0040094256401062012, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { -12633, -32225, 3603, 6194, -14569, -2568, -23936, -83, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 0.00019070626876782626, 8.7569809693377465e-05, 6.3093793869484216e-05, 7.1479073085356504e-05, 9.6257768745999783e-05, 7.1087961259763688e-05, 6.5309170167893171e-05, 0.00010655501682776958, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 54,55,-73,58,16,33,-96,-41,11,-15,-8,-41,-17,4,47,-2,56,-19,42,-30,26,-44,50,-8,14,-26,-13,13,-15,1,-20,1,54,17,16,13,127,63,27,-31,9,-24,-9,-26,83,26,22,-56, 
  /* [1][0][][] */ 71,32,13,-3,33,97,-9,-30,37,66,-44,-70,106,-16,15,43,32,35,18,-95,127,-33,48,41,37,23,52,11,21,-58,47,70,64,97,8,102,60,22,11,16,93,15,29,29,26,37,106,-79, 
  /* [2][0][][] */ -11,16,74,127,-55,32,-5,45,42,70,12,-86,-34,113,22,32,-71,-100,67,-2,9,54,-40,-96,-35,-42,43,-15,-114,16,3,-4,-28,-34,-92,-53,12,14,-98,-33,-21,-67,-44,21,59,-82,-33,16, 
  /* [3][0][][] */ -31,47,-67,-5,32,-73,-2,62,109,-72,-44,23,-6,-24,21,64,28,4,-22,-35,-12,16,-77,43,-27,-24,33,-13,73,-28,37,-62,33,-20,-29,-50,-127,-6,-70,9,-17,-54,42,-8,-49,20,-10,-42, 
  /* [4][0][][] */ 47,-23,19,-26,-66,52,28,84,-127,-61,75,34,67,-56,-72,-53,76,71,73,-18,10,-80,-28,58,-30,2,-62,-115,-64,-62,92,40,74,15,114,92,68,64,65,36,-2,38,-42,-31,76,76,89,-36, 
  /* [5][0][][] */ 27,77,18,92,21,21,-44,-87,-103,30,-7,6,22,58,40,-59,73,105,-17,38,-20,-58,-22,-70,-92,-71,-40,57,0,43,-26,46,-8,-75,71,11,-30,127,-42,-101,-8,-36,-11,-32,4,-15,-36,96, 
  /* [6][0][][] */ 124,64,-12,127,-110,28,20,66,15,-87,76,78,89,-40,-40,-59,72,30,-70,29,85,-33,-31,-13,4,57,-34,-61,13,-42,71,64,26,-45,-7,88,98,-92,-12,10,-99,80,-121,65,66,101,113,-57, 
  /* [7][0][][] */ 25,16,127,35,-41,65,-91,3,-31,104,-6,-19,55,56,10,-6,-45,-17,-64,-5,-6,28,-1,-45,-11,37,55,-22,5,-2,20,-20,-82,-18,59,28,84,-10,30,-15,-15,-41,-37,-51,4,-31,16,20, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0081050163134932518, 0.0037217168137431145, 0.0026814860757440329, 0.0030378606170415878, 0.0040909550152719021, 0.0030212383717298508, 0.0027756397612392902, 0.0045285881496965885, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 13459, -16677, -984, 1714, -1415, 12930, 2643, 186, -12170, 477, -1508, -1118, -8630, -15419, 11006, 31, -8460, 25391, 620, -12332, 12728, 2024, 972, 385, -280, -1159, -2701, 1472, -1278, 3203, -181, 23234, 13776, -1341, 2393, 14144, -3764, 18154, -176, 716, -3308, -8369, -2921, 3033, 3390, 25012, 12626, -3713, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00010260030830977485, 8.9030538219958544e-05, 0.00098197534680366516, 0.00031032474362291396, 0.00017756446322891861, 0.0001428866817150265, 0.0001296395348617807, 0.00050358287990093231, 0.00011034650378860533, 0.00049140292685478926, 0.00022100286150816828, 0.00012721651000902057, 0.00013620154641102999, 8.9889283117372543e-05, 8.8902110292110592e-05, 8.9109285909216851e-05, 8.5271487478166819e-05, 7.0872214564587921e-05, 0.00041182219865731895, 6.6723259806167334e-05, 0.00011509462638059631, 0.00032941572135314345, 0.00021388407913036644, 0.00020331225823611021, 0.00025900304899550974, 0.00022605771664530039, 0.00025274773361161351, 0.00025503351935185492, 0.0002292423159815371, 0.0001732982782414183, 0.00010424360516481102, 9.7595322586130351e-05, 9.8776734375860542e-05, 0.00022295647067949176, 0.00018031097715720534, 0.00013103405945003033, 0.00076452607754617929, 0.00013841262261848897, 0.00013896804011892527, 0.00053034326992928982, 0.00018458539852872491, 0.00014916603686287999, 0.00022207165602594614, 0.0001476758043281734, 0.00019882772176060826, 5.9500558563740924e-05, 0.00012682061060331762, 0.00023025115660857409, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -49,1,34,7,127,-53,26,4,30,27,59,-38,20,15,-72,29,75,-81,-31,71,-48,-1,-59,-10,-9,3,28,-52,-21,127,43,-94,-20,111,127,-61,13,-61,-127,-33,21,-25,7,-67,3,-10,-127,10, -67,47,-28,25,1,-93,127,-18,79,9,36,127,87,108,-52,59,127,-127,-4,95,-42,-41,79,-127,6,47,-103,14,-21,-113,110,-127,-127,-79,28,-16,-56,-30,-104,15,-56,-35,41,-127,36,-92,43,54, -24,4,10,-5,66,-46,27,-6,38,26,42,-88,2,8,-105,43,81,-36,-28,56,-35,-9,-55,1,21,-2,31,-117,-28,41,-28,-86,42,11,110,-39,17,-45,-86,3,22,2,26,-53,-14,-83,-114,-5, 
  /* [0][1][][] */ -127,113,-28,-66,0,-88,7,-12,48,20,21,50,94,110,-109,55,117,-124,6,102,-35,-73,-100,-30,-127,-1,-33,10,-5,-6,104,-91,-71,127,-89,-71,40,-83,30,58,-93,31,-79,53,-15,-105,6,-49, 30,98,127,127,-35,76,-127,127,127,-127,-127,66,127,127,127,-68,-54,-104,127,23,-127,127,127,-3,92,117,78,127,127,-97,127,-11,-60,-102,-9,-127,127,127,102,61,-60,127,-17,68,127,55,-20,-122, -75,75,-54,-54,-53,-127,10,-30,14,8,103,46,41,106,-98,119,117,-91,-19,105,29,-99,-95,-33,18,-16,-24,18,0,11,104,-73,-5,-35,-107,-57,28,-98,49,-127,-64,35,127,63,-39,-127,-5,127, 
  /* [0][2][][] */ -57,22,3,-10,12,-50,14,-1,50,31,106,51,18,10,-62,92,86,1,-50,22,-33,4,-58,48,-16,-7,-37,-26,16,61,15,-8,-29,43,-71,31,-30,-57,46,-38,93,13,-13,-3,-22,-12,-3,-38, -102,127,-16,24,-89,-122,76,-79,63,25,8,-81,-63,55,-89,127,94,48,-4,127,-43,8,89,115,10,-127,127,2,23,-59,-29,-122,-5,-49,-52,-113,-61,-77,47,38,127,84,-40,30,-35,-103,-111,-7, 3,9,26,-7,-19,-50,9,4,48,26,108,27,49,9,-68,35,69,-1,-61,30,-42,-5,-61,47,12,-13,-38,-68,6,-12,0,-2,-12,-4,-36,48,-23,-40,56,2,63,21,28,-9,-26,-64,8,42, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0046291914768517017, 0.0040169414132833481, 0.044305440038442612, 0.014001446776092052, 0.0080114761367440224, 0.0064468602649867535, 0.0058491663075983524, 0.022721000015735626, 0.004978689830750227, 0.02217145636677742, 0.0099713597446680069, 0.0057398425415158272, 0.0061452356167137623, 0.0040556867606937885, 0.0040111467242240906, 0.0040204944089055061, 0.0038473380263894796, 0.0031976616010069847, 0.018580878153443336, 0.0030104659963399172, 0.0051929187029600143, 0.014862805604934692, 0.0096501698717474937, 0.0091731827706098557, 0.011685878038406372, 0.010199428535997868, 0.011403647251427174, 0.011506778188049793, 0.010343112982809544, 0.0078189913183450699, 0.0047033349983394146, 0.0044033732265233994, 0.004456677008420229, 0.010059503838419914, 0.0081353951245546341, 0.0059120850637555122, 0.034494414925575256, 0.0062449960969388485, 0.0062700561247766018, 0.023928394541144371, 0.0083282515406608582, 0.0067301765084266663, 0.010019582696259022, 0.0066629387438297272, 0.0089708464220166206, 0.0026845873799175024, 0.0057219802401959896, 0.010388630442321301, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 641, 5170, -7658, 4978, 2408, 4654, 2356, 11614, 8072, 7662, -2208, -118, 1249, 3610, 1785, -838, -216, 5361, 10221, 275, 3081, 10761, 3078, 5643, 9914, 6092, 1288, 6230, 1669, 4120, -1703, 9611, 1046, 6419, 7358, 3401, 143666, 9132, 5544, 13219, 1793, 624, 3562, 1474, 3212, 1934, 1794, 3314, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.00031951608252711594, 0.00014684782945550978, 0.00010599115921650082, 0.00013481802307069302, 0.00022205999994184822, 0.00014647452917415649, 0.00018512734095565975, 7.6043623266741633e-05, 0.00011927955347346142, 0.00010110065340995789, 0.00017290087998844683, 0.00019034644355997443, 0.000201457180082798, 0.00017786862736102194, 0.0002762800722848624, 0.00014974172518122941, 0.00019724712183233351, 0.0001419971085852012, 9.6594951173756272e-05, 0.00023894531477708369, 0.00016016536392271519, 7.5454016041476279e-05, 0.00018420920241624117, 0.00012692374002654105, 8.8265260274056345e-05, 0.00014619667490478605, 0.00017827391275204718, 0.00014154832751955837, 0.00010949554416583851, 0.00018733524484559894, 0.00025824119802564383, 8.5313324234448373e-05, 0.0003121525514870882, 0.00011649676889646798, 9.106881043408066e-05, 0.00021845869196113199, 1.1131227438454516e-05, 9.7463911515660584e-05, 0.00011247076326981187, 7.6668249676004052e-05, 0.00016873002459760755, 0.00025911076227203012, 0.00020044192206114531, 0.0001335998676950112, 0.00019621416868176311, 0.00015098685980774462, 0.00021183295757509768, 0.00011764377995859832, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ -84,-127,-25,22,-27,-3,40,-46, 
  /* [1][0][][] */ -5,127,52,-99,5,-88,-73,101, 
  /* [2][0][][] */ -127,-72,41,17,80,8,24,-20, 
  /* [3][0][][] */ -2,-47,-127,-56,29,-43,-38,63, 
  /* [4][0][][] */ -58,-111,100,-26,127,-87,88,13, 
  /* [5][0][][] */ -32,63,44,-101,110,20,-63,127, 
  /* [6][0][][] */ -127,90,52,63,-48,4,33,-106, 
  /* [7][0][][] */ 60,-1,64,48,54,-127,1,106, 
  /* [8][0][][] */ 4,60,-14,-31,15,92,127,-66, 
  /* [9][0][][] */ 93,127,14,-58,-73,-71,-53,115, 
  /* [10][0][][] */ 28,-15,20,4,-21,33,-127,-64, 
  /* [11][0][][] */ -77,35,-123,-80,127,11,52,77, 
  /* [12][0][][] */ 93,41,-29,-6,127,89,13,9, 
  /* [13][0][][] */ -126,-127,-19,64,-113,47,82,2, 
  /* [14][0][][] */ -27,82,-86,111,-43,127,-24,14, 
  /* [15][0][][] */ 2,-58,-29,-80,127,52,-15,61, 
  /* [16][0][][] */ 72,-81,-6,49,37,-27,42,-127, 
  /* [17][0][][] */ -73,-81,-127,101,2,101,85,-107, 
  /* [18][0][][] */ 65,-14,127,2,-42,-105,-82,-29, 
  /* [19][0][][] */ -39,127,38,36,90,-120,-71,-28, 
  /* [20][0][][] */ -82,-19,-127,-49,45,3,-12,-11, 
  /* [21][0][][] */ -125,-9,40,53,-101,-112,127,-42, 
  /* [22][0][][] */ 64,3,-127,-63,-40,-2,0,56, 
  /* [23][0][][] */ -25,26,127,-15,-87,35,-3,-103, 
  /* [24][0][][] */ -73,86,77,92,127,85,-5,-33, 
  /* [25][0][][] */ -41,-127,-77,29,-50,41,36,-18, 
  /* [26][0][][] */ 83,118,-109,-72,-127,-13,-49,48, 
  /* [27][0][][] */ 63,47,-77,13,-127,33,-38,-7, 
  /* [28][0][][] */ -41,54,24,-89,81,96,-127,-96, 
  /* [29][0][][] */ 45,3,-5,-65,-127,4,18,-50, 
  /* [30][0][][] */ -88,-1,39,127,43,20,-43,-17, 
  /* [31][0][][] */ 12,-127,-9,-83,-101,50,-59,-118, 
  /* [32][0][][] */ -127,-1,30,-6,9,-23,-7,14, 
  /* [33][0][][] */ 52,-53,-127,-99,-12,1,-37,17, 
  /* [34][0][][] */ 68,98,127,6,-110,-52,54,-81, 
  /* [35][0][][] */ 108,20,10,5,-106,-48,-127,-52, 
  /* [36][0][][] */ 127,0,73,-54,-4,-24,94,100, 
  /* [37][0][][] */ 116,106,-13,-11,76,86,-127,37, 
  /* [38][0][][] */ -53,102,127,127,-30,60,35,-61, 
  /* [39][0][][] */ 40,71,127,-38,74,-76,-19,18, 
  /* [40][0][][] */ 56,29,35,-12,-86,-127,13,-60, 
  /* [41][0][][] */ 34,-59,28,127,-27,75,1,98, 
  /* [42][0][][] */ -15,-116,78,-59,127,-43,124,46, 
  /* [43][0][][] */ -3,-38,-97,-33,127,55,-76,115, 
  /* [44][0][][] */ 106,-28,127,-5,1,46,-50,6, 
  /* [45][0][][] */ -21,27,32,-25,-93,-127,-13,94, 
  /* [46][0][][] */ -60,71,68,25,3,-25,35,-127, 
  /* [47][0][][] */ 33,-9,28,127,-12,-92,53,65, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0058827754110097885, 0.0027036913670599461, 0.0019514580490067601, 0.002482204232364893, 0.0040884613990783691, 0.0026968182064592838, 0.0034084750805050135, 0.0014000784140080214, 0.0021961175370961428, 0.0018614163855090737, 0.0031833674293011427, 0.003504566615447402, 0.0037091323174536228, 0.0032748312223702669, 0.0050867348909378052, 0.0027569723315536976, 0.0036316185723990202, 0.0026143821887671947, 0.0017784595256671309, 0.0043993457220494747, 0.0029488871805369854, 0.0013892228016629815, 0.0033915708772838116, 0.0023368585389107466, 0.00162509735673666, 0.002691702451556921, 0.0032822929788380861, 0.0026061194948852062, 0.002015979029238224, 0.0034491259139031172, 0.0047546122223138809, 0.0015707476995885372, 0.0057472018525004387, 0.0021448822226375341, 0.0016767149791121483, 0.0040221558883786201, 0.00020494277123361826, 0.0017944584833458066, 0.0020707573276013136, 0.0014115787344053388, 0.0031065756920725107, 0.0047706221230328083, 0.0036904397420585155, 0.002459776122123003, 0.0036126004997640848, 0.0027798970695585012, 0.0039001661352813244, 0.0021660004276782274, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 3948, -403, 13449, -8334, -15448, -16319, -5613, -332, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 9.9030141427647322e-05, 0.00010275631939293817, 0.0001002035933197476, 0.00012078435247531161, 0.00013909190602134913, 8.686068031238392e-05, 0.00019916627206839621, 0.00021388701861724257, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -15,-31,49,-56,48,87,71,101,113,-53,-30,54,-28,-18,8,-17,35,36,10,-51,-30,17,-86,-32,26,-13,23,-70,-43,24,36,26,29,47,68,14,124,-47,-78,8,-62,-73,-42,-4,-75,-87,-127,66, 
  /* [1][0][][] */ -18,-7,-39,43,-3,16,-42,-13,-61,25,12,80,-31,0,-28,127,36,54,5,-31,-44,-21,-62,16,8,-12,-18,-86,44,-18,-58,-62,64,-31,-32,-53,35,33,47,-45,3,64,44,-44,2,-41,-56,-17, 
  /* [2][0][][] */ 4,-74,-23,-9,-35,23,-2,18,98,17,-9,-20,-34,-77,29,14,2,-56,-21,2,-95,51,10,23,-1,43,-31,-30,-25,-40,34,-39,-87,23,-53,54,-61,53,-18,-28,127,-17,-1,34,24,33,-61,-31, 
  /* [3][0][][] */ -38,-107,101,62,24,-109,-13,-12,-127,126,60,-49,57,16,-23,17,59,29,-30,45,77,93,31,-62,20,94,68,39,-31,-74,21,12,-34,13,54,18,-19,-88,-43,42,-28,-14,23,-65,-80,16,0,31, 
  /* [4][0][][] */ -6,61,-22,84,43,2,7,-9,-53,83,56,73,4,26,67,13,12,-98,-4,-12,91,-14,-97,61,82,-22,27,24,62,37,-6,-54,-57,127,-2,15,59,-24,24,28,-24,46,7,-21,2,-47,-30,12, 
  /* [5][0][][] */ -19,9,-10,-64,-116,33,125,25,21,53,-23,-22,-96,-3,69,-36,-81,33,-52,-73,4,104,-1,42,112,32,0,22,-19,-9,127,-59,-17,107,81,92,-25,53,90,48,-22,-39,-25,42,-55,58,36,54, 
  /* [6][0][][] */ 0,-27,-9,20,-53,-49,10,3,18,-9,37,2,-54,-28,29,57,2,-54,6,-61,66,-26,-1,-34,0,-7,5,33,39,1,9,127,48,-21,-13,20,6,-12,16,10,-3,32,-27,-53,-5,-28,-27,36, 
  /* [7][0][][] */ -28,-20,-43,-9,2,-25,3,14,39,2,17,-2,-10,10,-4,0,27,-6,0,-9,-61,8,9,-29,-1,-6,-55,-15,-18,-21,18,31,20,-8,28,11,-21,127,-13,-44,-42,-5,-49,-34,20,62,-73,-10, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.004208780825138092, 0.0043671433813869953, 0.0042586526833474636, 0.0051333350129425526, 0.0059114056639373302, 0.0036915787495672703, 0.0084645664319396019, 0.0090901982039213181, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { -368, 25027, 29579, -937, 39, -11820, 21477, 19415, -9421, -347, -1260, 14786, 18524, -12735, -8635, -3509, 159, 31038, -421, -210, 49830, 12318, -10717, -5770, 17862, 13478, -2646, -968, -3506, 103, 30198, -2621, -5319, 10993, 14586, 12607, -2582, 41831, -3913, -1064, 26608, 137, -2036, 15954, 285, -1023, -6578, 13486, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00020182215666864067, 0.00012830679770559072, 9.4359107606578618e-05, 9.5420386060141027e-05, 5.5342887208098546e-05, 0.00014049372111912817, 0.00012342390255071223, 8.4148516179993749e-05, 0.00024275493342429399, 5.9793270338559523e-05, 0.00013562767708208412, 0.00010076016042148694, 0.00011511082266224548, 0.0002091674687108025, 0.00010036061576101929, 8.7239983258768916e-05, 7.8622782893944532e-05, 0.00011655850539682433, 0.00051889900350943208, 7.633751374669373e-05, 4.9323840357828885e-05, 8.1845078966580331e-05, 7.6507320045493543e-05, 0.00010812161053763703, 8.5942789155524224e-05, 9.9614364444278181e-05, 0.00015305023407563567, 0.00011421331873862073, 0.00013634773495141417, 0.00019420604803599417, 0.00015857933613006026, 9.3088608991820365e-05, 7.101888331817463e-05, 0.00010321759327780455, 9.1291185526642948e-05, 8.7861139036249369e-05, 9.1716130555141717e-05, 8.8394263002555817e-05, 8.5107225459069014e-05, 7.9884790466167033e-05, 0.00014413191820494831, 0.00025074987206608057, 6.4909610955510288e-05, 0.00010521423973841593, 0.00020706391660496593, 0.00012211888679303229, 0.00025113727315329015, 0.00011919192183995619, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 56,-43,-30,59,79,33,-75,-103,8,66,92,-66,-20,66,101,44,65,-87,43,94,-92,-115,51,127,-63,-41,84,83,95,97,-52,55,44,-77,-102,-66,63,-54,79,30,-83,27,48,-87,56,115,61,-58, 99,-65,-63,101,107,51,-81,-105,24,79,96,-94,-55,77,127,63,63,-113,43,116,-86,-127,75,126,-91,-69,117,88,103,127,-71,75,60,-93,-127,-75,77,-75,81,56,-101,50,41,-92,82,127,70,-80, 50,-43,-57,42,39,-3,-30,-72,8,22,31,-24,-37,28,54,30,8,-23,15,42,-28,-78,43,65,-31,-20,47,47,43,95,-23,4,33,-66,-75,-34,24,-23,9,39,-47,39,20,-34,27,24,15,-54, 
  /* [0][1][][] */ 33,-91,-65,80,109,80,-112,-118,86,121,112,-79,-58,97,121,94,112,-109,38,109,-104,-117,79,120,-126,-72,116,103,127,57,-82,107,98,-127,-112,-127,90,-91,121,98,-101,82,117,-127,93,117,50,-80, 41,-127,-127,127,127,127,-127,-127,127,127,127,-127,-127,127,109,127,127,-127,52,127,-127,-114,127,111,-127,-127,127,127,120,66,-127,127,127,-120,-107,-107,127,-127,127,127,-127,127,127,-115,127,123,61,-127, -7,-71,-101,60,58,28,-49,-62,42,39,27,-49,-89,49,40,69,34,-33,21,38,-44,-68,68,44,-64,-20,12,69,59,-3,-31,30,56,-108,-96,-34,44,-32,36,62,-39,59,62,-51,54,-6,35,-83, 
  /* [0][2][][] */ -44,-37,-62,55,46,38,-44,-30,-98,70,38,-46,-52,21,73,67,56,-20,-85,64,-22,-67,55,33,-99,-61,74,59,53,-16,-60,45,65,-79,-33,-59,40,-50,54,108,-25,22,49,-69,18,24,-105,-24, -127,-58,-99,91,62,68,-56,-25,-73,68,56,-51,-96,31,57,88,68,-29,-127,77,-47,-90,76,19,-100,-48,63,62,47,10,-84,52,83,-104,-11,-55,63,-64,58,120,-20,51,96,-70,41,-19,-127,-69, -61,-25,-78,66,27,17,3,-4,-95,22,18,-23,-56,12,24,56,19,-10,-65,38,-22,-3,32,13,-58,12,0,42,35,11,-27,16,40,-49,-16,-4,24,-12,1,58,-10,18,64,-19,3,-18,-52,-44, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0085774417966604233, 0.0054530389606952667, 0.0040102619677782059, 0.0040553663857281208, 0.002352072624489665, 0.005970983300358057, 0.0052455156110227108, 0.00357631198130548, 0.01031708437949419, 0.0025412139948457479, 0.0057641761377453804, 0.0042823068797588348, 0.0048922100104391575, 0.0088896173983812332, 0.0042653260752558708, 0.0037076992448419333, 0.003341468283906579, 0.0049537364393472672, 0.022053206339478493, 0.0032443443778902292, 0.002096263226121664, 0.0034784157760441303, 0.0032515609636902809, 0.0045951684005558491, 0.0036525684408843517, 0.004233610350638628, 0.0065046348609030247, 0.0048540658317506313, 0.0057947784662246704, 0.0082537569105625153, 0.0067396215163171291, 0.0039562657475471497, 0.0030183026101440191, 0.0043867477215826511, 0.0038798751775175333, 0.00373409828171134, 0.0038979356177151203, 0.0037567561957985163, 0.0036170571111142635, 0.0033951036166399717, 0.0061256061308085918, 0.010656869970262051, 0.0027586582582443953, 0.0044716051779687405, 0.008800216019153595, 0.0051900525577366352, 0.010673333890736103, 0.0050656567327678204, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { -1661, 6395, 3737, -1053, 126, 6649, 3821, 1185, 10636, 1304, -2323, 1529, 4236, 1327, -449, 951, -1365, 5887, -3248, -776, 1011, 1293, 463, -620, 186, 2554, -1786, -1222, -959, -2964, 11494, 2703, 470, 675, 427, 1382, 1145, 7288, 1251, 282, 7166, -1940, 605, 1364, -1512, -1899, 14318, 2621, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00030737931956537068, 0.00013779544678982347, 0.00021443796867970377, 0.00027180195320397615, 0.0004829892423003912, 0.00012935991981066763, 0.00022669423196930438, 0.00030480389250442386, 9.6710347861517221e-05, 0.00038695416878908873, 0.00019643560517579317, 0.00030669861007481813, 0.00017058673256542534, 0.00030068072373978794, 0.00036228186218068004, 0.00025744613958522677, 0.00026355762383900583, 0.00016080679779406637, 0.0001542673708172515, 0.00039647318772040308, 0.00039760646177455783, 0.00023049089941196144, 0.00031389892683364451, 0.00026564332074485719, 0.00039575962000526488, 0.00021164101781323552, 0.00025538846966810524, 0.00021845170704182237, 0.00029662111774086952, 0.00016214574861805886, 9.9502933153416961e-05, 0.00026862157392315567, 0.00048860569950193167, 0.00039314292371273041, 0.00028623529942706227, 0.00028953864239156246, 0.00022903166245669127, 0.00012123800115659833, 0.00033169329981319606, 0.00027544333715923131, 0.00013987482816446573, 0.00014306601951830089, 0.00035639165434986353, 0.00031571867293678224, 0.00038488433347083628, 0.00024507410125806928, 7.7256678196135908e-05, 0.00021275598555803299, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 43,26,-57,22,-31,47,-127,20, 
  /* [1][0][][] */ 2,-61,-121,-2,-10,-25,127,-120, 
  /* [2][0][][] */ -127,-51,-69,-46,-34,55,-109,0, 
  /* [3][0][][] */ -67,-44,19,0,-16,-127,-103,-20, 
  /* [4][0][][] */ -45,-127,-39,17,52,15,-36,-38, 
  /* [5][0][][] */ 71,-21,81,41,-127,46,-84,-100, 
  /* [6][0][][] */ 38,-127,-67,-29,-11,69,-50,-87, 
  /* [7][0][][] */ -29,-88,-63,-56,82,-127,-3,19, 
  /* [8][0][][] */ 40,62,45,64,31,-54,1,127, 
  /* [9][0][][] */ -29,-60,-54,14,49,-11,127,-13, 
  /* [10][0][][] */ -26,2,-127,29,14,22,105,-113, 
  /* [11][0][][] */ 1,-35,-37,2,-127,20,7,55, 
  /* [12][0][][] */ 106,71,-24,37,-81,127,84,-20, 
  /* [13][0][][] */ -55,-8,20,-25,44,-127,-8,80, 
  /* [14][0][][] */ -96,-53,3,48,7,66,-127,-117, 
  /* [15][0][][] */ 57,72,46,-3,-127,33,110,-46, 
  /* [16][0][][] */ 7,-51,13,67,-11,-72,12,-127, 
  /* [17][0][][] */ -74,127,19,-9,-54,-44,-86,-74, 
  /* [18][0][][] */ 94,127,-101,-126,111,101,-105,-84, 
  /* [19][0][][] */ -29,86,-17,23,-127,14,-70,-113, 
  /* [20][0][][] */ -127,2,10,8,23,18,105,43, 
  /* [21][0][][] */ -24,-18,50,11,-102,-127,-124,30, 
  /* [22][0][][] */ -6,-36,-50,-4,-127,7,0,57, 
  /* [23][0][][] */ 66,-1,-25,0,127,73,-84,91, 
  /* [24][0][][] */ 127,14,-57,17,-96,8,16,-6, 
  /* [25][0][][] */ 37,-75,53,101,-59,-127,26,118, 
  /* [26][0][][] */ 17,127,4,58,76,-18,20,-14, 
  /* [27][0][][] */ -127,112,59,-21,124,-73,-5,112, 
  /* [28][0][][] */ -79,-83,-67,-31,83,-127,26,-10, 
  /* [29][0][][] */ -58,-31,38,57,127,-98,-94,83, 
  /* [30][0][][] */ 126,39,-127,-108,-84,-92,-68,-69, 
  /* [31][0][][] */ 30,-1,42,60,-127,6,39,5, 
  /* [32][0][][] */ 127,23,47,35,-44,-63,94,68, 
  /* [33][0][][] */ 127,30,-37,-4,-118,-71,19,49, 
  /* [34][0][][] */ 38,-16,-24,16,-47,127,20,-67, 
  /* [35][0][][] */ 124,32,-18,-47,29,-99,39,127, 
  /* [36][0][][] */ -44,-46,70,-108,-34,-26,78,-127, 
  /* [37][0][][] */ 69,-69,57,49,112,-10,33,-127, 
  /* [38][0][][] */ 67,127,12,-27,-22,25,24,80, 
  /* [39][0][][] */ 15,2,-85,80,-21,-65,-91,127, 
  /* [40][0][][] */ -19,-32,-2,-36,27,-127,18,45, 
  /* [41][0][][] */ -31,32,-127,-69,75,125,71,-96, 
  /* [42][0][][] */ 23,-44,-45,18,67,127,31,52, 
  /* [43][0][][] */ 0,40,-23,27,-127,-85,57,-70, 
  /* [44][0][][] */ -127,-59,-17,-33,42,60,-103,-67, 
  /* [45][0][][] */ -61,60,-59,18,36,-2,-67,127, 
  /* [46][0][][] */ -13,32,127,-5,-67,-48,-36,36, 
  /* [47][0][][] */ -127,-97,-60,-42,99,119,-27,87, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0029058344662189484, 0.0013026600936427712, 0.0020272061228752136, 0.0025695010554045439, 0.0045659765601158142, 0.001222914201207459, 0.0021430717315524817, 0.0028814873658120632, 0.00091425888240337372, 0.0036581016611307859, 0.0018570193788036704, 0.0028993994928896427, 0.0016126551199704409, 0.0028425087220966816, 0.0034248600713908672, 0.0024337873328477144, 0.0024915626272559166, 0.0015201997011899948, 0.001458378741517663, 0.0037480904720723629, 0.0037588039413094521, 0.0021789637394249439, 0.0029674679972231388, 0.0025112798903137445, 0.0037413446698337793, 0.0020007649436593056, 0.0024143347982317209, 0.0020651503000408411, 0.0028041310142725706, 0.0015328575391322374, 0.00094065879238769412, 0.0025394351687282324, 0.0046190721914172173, 0.0037166073452681303, 0.0027059479616582394, 0.002737176138907671, 0.0021651687566190958, 0.0011461329413577914, 0.0031356886029243469, 0.0026039252988994122, 0.001322317635640502, 0.0013524858513846993, 0.0033691765274852514, 0.0029846711549907923, 0.0036385343410074711, 0.0023168271873146296, 0.00073035206878557801, 0.0020113054197281599, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 12037, 15390, 5419, 6322, -634, -13046, 8125, -6502, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00013623118866235018, 0.00012541559408418834, 0.00013725469761993736, 0.00019004882778972387, 0.00012999599857721478, 0.00013968077837489545, 7.7142991358414292e-05, 0.0001141607208410278, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ 41,-54,97,63,27,-44,22,3,-7,60,-35,16,-43,-86,40,8,-112,61,-33,72,-46,67,-1,-21,-8,-53,61,-30,-27,19,-28,104,-67,-12,-40,-75,-60,-46,-35,-9,-11,55,-127,9,42,20,22,45, 
  /* [1][0][][] */ -56,-30,71,-9,-31,32,-41,-32,56,-11,-3,-30,-20,16,-1,28,6,22,13,-8,-65,-30,-80,-31,31,-48,-33,-31,23,-73,-11,-127,-4,-62,-76,-74,-50,-94,-28,20,47,-14,90,-110,-48,-16,-30,-1, 
  /* [2][0][][] */ -62,99,2,33,7,10,19,-37,72,-47,67,83,96,10,27,-47,98,2,3,39,-13,14,18,127,-113,-50,2,-28,-8,85,-21,-93,-30,-2,3,-84,-25,7,-37,-14,88,-86,26,-3,27,-124,-11,-18, 
  /* [3][0][][] */ 61,-15,-59,30,82,-87,1,-127,-39,-5,-65,-91,-21,127,-16,30,-49,-18,-71,-43,32,90,-17,-51,116,37,53,-77,27,-105,56,-70,48,62,108,-81,-57,18,-34,49,25,88,-80,34,-3,26,-1,35, 
  /* [4][0][][] */ -45,28,-38,68,89,-26,28,-37,-31,-7,-53,33,-45,-13,4,-62,16,62,-29,-38,-35,36,-57,-66,25,1,24,-34,32,-28,-30,60,2,72,-57,-74,-55,-61,-36,5,66,-47,127,17,11,84,-42,-44, 
  /* [5][0][][] */ 53,3,81,-5,-6,18,54,35,127,4,72,-4,83,55,27,-59,-9,30,34,-36,-58,-72,9,45,22,-21,27,43,-44,-35,23,-21,-23,51,-24,65,46,3,-27,-42,-12,76,27,38,-16,-4,73,10, 
  /* [6][0][][] */ 1,-71,-19,7,37,-15,-1,6,-57,-24,100,55,105,66,-35,58,111,-126,-24,5,-16,-44,-108,43,-88,60,-43,-2,-17,-57,76,-56,89,10,-82,-15,-43,8,57,10,75,-77,-12,-76,-127,41,-52,19, 
  /* [7][0][][] */ -10,-18,-57,-33,15,109,0,-7,-7,-60,-127,-98,37,56,-63,-46,-33,30,104,27,-10,-81,61,-14,110,-32,-84,87,-39,-4,-24,-88,-55,67,48,116,92,-66,-20,-40,-23,-11,47,-13,-7,-27,2,-62, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.005789825227111578, 0.005330162588506937, 0.0058333245106041431, 0.0080770747736096382, 0.0055248299613595009, 0.005936433095484972, 0.0032785770017653704, 0.0048518306575715542, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -738, 1560, -951, 34, 103, 9698, -15, -4135, -5411, 157, -6844, -184, -4491, -6697, -1713, -405, -8629, 14385, -3319, -39, -883, 307, -1503, 599, 19615, 298, -877, -977, 1117, 879, -684, -7769, -781, 8382, 674, 5981, -722, -4439, -2179, -260, -5055, -680, 4714, 4005, 652, 7840, 1511, -2086, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00028666452271863818, 0.00015005584282334894, 0.00060240336460992694, 0.00016448898531962186, 0.00018042195006273687, 0.00030407580197788775, 0.00026185991009697318, 0.00016951397992670536, 0.00034556465107016265, 0.00016675736696925014, 0.00044887355761602521, 0.0001696797990007326, 0.00013865313667338341, 0.0001447630493203178, 0.00015464896569028497, 0.00046283492702059448, 0.00025856131105683744, 9.9454657174646854e-05, 0.00013595557538792491, 0.00047207446186803281, 0.00026696966961026192, 0.0004144787963014096, 0.00017333196592517197, 0.00081330968532711267, 0.00026606910978443921, 0.00030545316985808313, 0.00022075969900470227, 0.00020750131807290018, 0.00021404876315500587, 0.00019368728681001812, 0.00041016188333742321, 0.000431765743996948, 0.00046158867189660668, 0.00012039944704156369, 0.00043196763726882637, 0.00020068208687007427, 0.00022104935487732291, 9.3946691777091473e-05, 0.00047279422869905829, 0.00071775447577238083, 0.00018582007032819092, 0.00080375076504424214, 0.00059501040959730744, 0.00015640021592844278, 0.00026348498067818582, 0.00012169792898930609, 0.00018242088844999671, 0.00024545140331611037, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -5,-45,42,-30,127,-9,-9,-7,-29,47,-12,9,60,16,127,-38,22,-33,-32,-12,-29,-21,-64,23,-127,51,29,-50,-22,16,-17,-2,-27,48,12,5,84,55,38,-7,82,13,-16,3,-94,-5,-48,-42, 0,-101,-69,-31,-62,-7,39,30,21,2,60,127,-17,45,-58,127,0,-57,25,-51,-74,-127,-81,72,-111,-87,16,106,11,33,127,13,-127,-102,-56,42,127,-88,127,11,74,-10,-26,-5,-52,-11,67,-3, 13,-19,-8,127,46,9,-88,2,-21,-43,-16,-20,52,-3,-52,-45,20,27,-12,-6,0,-2,-25,13,-52,-63,-31,31,-7,29,-85,-6,15,84,14,24,5,75,-120,0,40,-1,-11,35,-127,0,-63,40, 
  /* [0][1][][] */ -117,-61,127,-8,-49,-43,81,19,18,88,4,18,51,32,106,30,41,-127,87,43,80,-9,52,-40,-17,-20,42,-57,21,52,33,56,38,-95,2,127,14,48,-37,-117,32,87,-21,-89,30,-90,-73,18, 127,-62,-74,-78,-4,-127,127,127,127,13,127,-40,-127,17,-28,-42,127,-89,127,127,127,79,127,-127,8,-27,104,-28,127,127,-126,127,28,-127,127,-94,-60,127,-95,125,-127,-127,127,-127,96,-127,127,-127, -11,-103,16,75,-30,-9,-55,10,-13,-127,-28,54,85,12,-52,45,18,14,-5,17,2,-23,49,-24,-6,7,-127,79,-79,9,89,18,-9,-109,-16,-36,63,22,126,7,33,52,-45,11,51,-29,-71,124, 
  /* [0][2][][] */ -5,122,34,-37,85,13,-38,-15,-29,11,-10,2,51,31,96,7,-13,-12,-17,-46,-24,8,3,13,-24,-19,38,2,-59,-112,-19,0,-4,77,-20,36,-53,49,19,109,11,21,-5,13,23,6,-23,-39, 4,96,-40,9,27,-36,0,33,30,5,22,-33,31,127,-61,-76,-1,-41,103,-80,-48,74,5,50,75,127,2,127,-80,-111,-12,-5,91,-104,-87,5,-63,-39,-23,-127,47,-21,-58,89,50,25,12,13, 21,127,-8,25,32,12,-62,-3,-20,-27,-5,-5,56,2,-61,-2,-17,-4,-31,-27,-1,3,4,1,-45,29,-37,14,28,-78,29,2,9,75,1,-14,-42,61,13,1,-31,-3,1,-8,9,8,-12,34, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.012183242477476597, 0.0063773728907108307, 0.025602143257856369, 0.006990781519562006, 0.0076679326593875885, 0.012923221103847027, 0.011129045858979225, 0.007204344030469656, 0.014686497859656811, 0.0070871878415346146, 0.019077125936746597, 0.0072113913483917713, 0.0058927582576870918, 0.0061524296179413795, 0.0065725808963179588, 0.019670484587550163, 0.010988855734467506, 0.0042268228717148304, 0.0057781119830906391, 0.020063163712620735, 0.011346210725605488, 0.017615348100662231, 0.0073666083626449108, 0.03456566110253334, 0.01130793709307909, 0.012981759384274483, 0.0093822870403528214, 0.0088188061490654945, 0.0090970722958445549, 0.008231709711253643, 0.017431879416108131, 0.018350044265389442, 0.019617518410086632, 0.0051169763319194317, 0.0183586236089468, 0.0085289888083934784, 0.0093945972621440887, 0.0039927344769239426, 0.020093753933906555, 0.030504563823342323, 0.0078973527997732162, 0.034159407019615173, 0.025287941098213196, 0.0066470089368522167, 0.011198111809790134, 0.0051721618510782719, 0.0077528874389827251, 0.010431684553623199, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 5913, 2841, 26811, -2571, -1529, 7215, -843, 983, 2662, 219, 8428, 625, 2937, 4033, 3058, 4309, 3228, 3045, -729, 4442, 1693, 546, 1116, 9096, 49257, 5151, 4518, -1404, -124, 6189, 7684, 8990, 12500, 3971, 6568, -1111, 629, 2470, 9340, 6590, 794, 10508, 15996, 3309, 8337, 2384, 4241, 1015, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00014172840747050941, 0.00021918481797911227, 4.7457921027671546e-05, 0.0002052504860330373, 0.00028736217063851655, 0.00015138674643822014, 0.00020646980556193739, 0.00054171698866412044, 0.00023328050156123936, 0.00027330295415595174, 0.00010591730097075924, 0.00028067207313142717, 0.00018589363025967032, 0.00019992973830085248, 0.00017927632143255323, 0.00018567760707810521, 0.00015744131815154105, 0.0001833361602621153, 0.00034518915344960988, 0.00017891902825795114, 0.00021706057304982096, 0.00026179847191087902, 0.00027621391927823424, 0.00010602644761092961, 3.2752435799920931e-05, 0.00016525379032827914, 0.00018164543143939227, 0.00026500076637603343, 0.00044154713395982981, 0.00013503500667866319, 0.00011689960228977725, 0.00010208142339251935, 7.8689576184842736e-05, 0.00020308089733589441, 0.00013856009172741324, 0.0001996772043639794, 0.00026483531109988689, 0.00018562360492069274, 0.00010252531501464546, 0.0001320521259913221, 0.00022761868603993207, 9.4649745733477175e-05, 7.4483672506175935e-05, 0.00022783744498156011, 0.00011727747914846987, 0.00027523847529664636, 0.00017565980670042336, 0.00025532054132781923, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -15,26,14,-127,-100,16,31,107, 
  /* [1][0][][] */ 93,12,-24,-7,-71,55,127,22, 
  /* [2][0][][] */ -15,106,-43,-35,-24,78,-58,-127, 
  /* [3][0][][] */ 52,-63,-88,111,-127,-40,-7,-25, 
  /* [4][0][][] */ 38,-62,50,-16,-127,0,40,26, 
  /* [5][0][][] */ -19,49,-7,-94,-127,-11,-35,1, 
  /* [6][0][][] */ 46,-16,44,39,127,-41,-2,-124, 
  /* [7][0][][] */ 14,30,25,127,19,-7,0,19, 
  /* [8][0][][] */ 27,20,15,-43,31,127,21,-33, 
  /* [9][0][][] */ 113,15,-11,22,-70,-47,127,66, 
  /* [10][0][][] */ 0,65,-73,-37,7,127,79,-61, 
  /* [11][0][][] */ -17,-36,-127,105,-70,22,-13,80, 
  /* [12][0][][] */ -96,-83,61,50,29,-127,-47,0, 
  /* [13][0][][] */ 40,34,33,52,-58,127,14,-38, 
  /* [14][0][][] */ 19,-94,9,2,-58,-82,-127,94, 
  /* [15][0][][] */ -87,40,-12,-1,108,-2,-127,-49, 
  /* [16][0][][] */ 83,76,-94,-127,64,112,95,38, 
  /* [17][0][][] */ -107,111,-127,40,-15,-30,20,-119, 
  /* [18][0][][] */ 37,-4,-96,127,-7,-32,-37,-55, 
  /* [19][0][][] */ 123,28,13,46,-66,4,127,62, 
  /* [20][0][][] */ 38,-91,-99,127,48,-27,-32,-67, 
  /* [21][0][][] */ 21,50,127,-111,52,-28,26,-109, 
  /* [22][0][][] */ -67,-42,-127,62,-24,32,18,97, 
  /* [23][0][][] */ 60,18,31,55,-127,83,52,-18, 
  /* [24][0][][] */ -12,0,-127,77,-39,21,44,68, 
  /* [25][0][][] */ 52,-36,-71,127,53,-3,-41,-16, 
  /* [26][0][][] */ -74,20,127,-91,-17,28,65,-18, 
  /* [27][0][][] */ -63,75,127,8,22,-7,77,12, 
  /* [28][0][][] */ -63,-122,50,-127,-24,-3,-11,-25, 
  /* [29][0][][] */ -69,-80,-10,78,-21,-127,-14,52, 
  /* [30][0][][] */ -127,41,122,-35,53,44,50,29, 
  /* [31][0][][] */ -62,51,86,-127,-47,18,35,60, 
  /* [32][0][][] */ -75,88,108,-103,2,2,8,127, 
  /* [33][0][][] */ 5,110,-51,44,20,21,-127,-21, 
  /* [34][0][][] */ 82,9,127,-108,-79,-105,39,-49, 
  /* [35][0][][] */ 85,2,33,109,76,-63,33,-127, 
  /* [36][0][][] */ 26,69,127,-104,29,-14,45,-115, 
  /* [37][0][][] */ -45,-44,99,56,4,-127,82,-19, 
  /* [38][0][][] */ 86,2,86,42,-24,-61,127,8, 
  /* [39][0][][] */ 41,-72,-32,3,-127,5,79,63, 
  /* [40][0][][] */ -42,36,-127,98,-37,49,-84,98, 
  /* [41][0][][] */ -100,-14,-52,-2,127,13,-83,5, 
  /* [42][0][][] */ -88,52,-17,-31,127,25,-118,-55, 
  /* [43][0][][] */ 127,98,-33,112,8,-103,35,76, 
  /* [44][0][][] */ -2,16,86,-4,55,-127,20,-32, 
  /* [45][0][][] */ -5,-76,127,74,-28,-27,-119,17, 
  /* [46][0][][] */ 43,-113,-127,55,-88,33,3,-14, 
  /* [47][0][][] */ -127,-21,58,-9,72,49,-118,-35, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0026291427202522755, 0.0040660034865140915, 0.00088037148816511035, 0.0038075137417763472, 0.0053307320922613144, 0.0028083105571568012, 0.0038301327731460333, 0.010049158707261086, 0.0043274862691760063, 0.0050699259154498577, 0.0019648263696581125, 0.0052066273055970669, 0.0034484327770769596, 0.0037088107783347368, 0.0033256779424846172, 0.0034444255288690329, 0.0029206261970102787, 0.0034009902738034725, 0.0064034559763967991, 0.0033190499525517225, 0.0040265973657369614, 0.0048565110191702843, 0.0051239258609712124, 0.0019668510649353266, 0.00060757639585062861, 0.0030655520968139172, 0.0033696263562887907, 0.0049159154295921326, 0.0081909513100981712, 0.0025049764662981033, 0.0021685543470084667, 0.0018936686683446169, 0.0014597364934161305, 0.0037672666367143393, 0.0025703688152134418, 0.0037041259929537773, 0.0049128462560474873, 0.0034434236586093903, 0.0019019030733034015, 0.0024496421683579683, 0.0042224563658237457, 0.001755806733854115, 0.0013817145954817533, 0.0042265146039426327, 0.0021755641791969538, 0.0051058307290077209, 0.0032585896551609039, 0.0047363415360450745, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -12280, 3120, -15913, -265, 2750, -3070, 10231, 814, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00015614555741194636, 0.00011342993093421683, 0.00011029473535018042, 6.3489897002000362e-05, 0.00018226266547571868, 0.00012740478268824518, 0.00013116720947436988, 0.00011752721184166148, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ 46,106,-35,66,-3,-6,-24,9,65,-60,7,-27,12,7,-34,-55,1,-20,28,18,-55,-31,-35,4,21,14,24,-1,19,12,-20,25,-63,12,110,-127,-23,26,-9,114,-22,15,13,-1,-13,36,26,-44, 
  /* [1][0][][] */ -2,-48,30,53,-15,-16,-14,-24,43,-39,94,40,19,14,-42,-77,127,39,13,12,-67,31,36,-11,-48,-97,-36,-50,-18,-56,41,-43,-14,-26,-33,11,4,-19,84,-49,-16,36,-63,31,84,60,15,45, 
  /* [2][0][][] */ 73,-26,-9,-12,108,111,58,76,-29,-5,2,-33,-11,45,56,32,-21,-37,56,-61,-39,-48,-44,58,-92,-99,116,21,61,-74,-60,19,-127,86,102,12,-9,-1,-13,22,26,62,13,-63,-20,20,59,-49, 
  /* [3][0][][] */ 80,-31,12,-8,119,127,24,40,-28,-28,26,55,-117,39,58,14,-1,11,72,-109,-92,18,32,83,10,-35,58,32,45,-60,12,-13,-105,64,-57,-115,25,-32,62,-48,58,-91,-101,-22,-64,36,-11,60, 
  /* [4][0][][] */ 34,41,-29,-37,-13,-13,-21,-14,2,-9,-14,-13,-32,-20,65,54,-40,-16,-31,41,26,-14,-14,8,-52,-39,-6,51,-13,16,-22,27,-34,-15,24,-127,-8,27,13,54,3,-9,-11,-25,41,6,86,-21, 
  /* [5][0][][] */ 65,54,-91,53,6,9,-5,25,-84,-58,-60,-23,33,20,45,32,42,-63,44,127,-72,-46,-56,49,33,-24,-36,66,31,30,-52,7,-6,-1,-59,1,-8,16,-25,68,14,77,-9,-41,122,27,13,-58, 
  /* [6][0][][] */ -30,-75,19,-48,-42,-40,-78,-80,-36,-63,-114,43,-56,-51,97,91,-127,8,21,-18,16,59,69,9,-11,-11,-72,88,-82,-41,46,74,17,-55,89,38,24,42,-14,-85,-8,-63,-30,17,-38,-25,-14,64, 
  /* [7][0][][] */ 77,20,-15,43,14,12,4,7,82,-14,-16,-15,60,5,-16,-24,-54,-7,-26,0,-3,-21,-22,-26,74,-127,13,1,5,98,-18,15,-77,25,-60,-46,-16,31,32,27,28,68,-32,-14,-50,37,45,-24, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0066361860372126102, 0.0048207719810307026, 0.0046875262632966042, 0.0026983206626027822, 0.0077461632899940014, 0.0054147033952176571, 0.0055746063590049744, 0.004994906485080719, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 748, 8988, 1805, -1193, -1847, -1845, 8129, 8520, 1393, -7092, -225, -170, 7356, 4396, 23063, 20297, -1110, -2446, 2787, 6181, 15447, -807, -33, 258, 4714, 46, 4780, 17952, 7299, 15426, 176, 2546, -944, -3845, -1078, 660, -202, 367, 128, 3964, 4760, 4277, -6513, 1188, 3860, -557, 11295, -575, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.908916061045602e-05, 0.0001332026586169377, 0.00062105047982186079, 8.0269179306924343e-05, 0.00047421205090358853, 0.00064832036150619388, 0.00012954066914971918, 0.00018097166321240366, 6.685183325316757e-05, 0.00020384791423566639, 0.00048430199967697263, 0.00025333513622172177, 0.0001869597181212157, 0.00015007171896286309, 5.860630699316971e-05, 5.157399209565483e-05, 0.00011671674292301759, 0.00048968329792842269, 5.9770551160909235e-05, 8.3493257989175618e-05, 6.6060863900929689e-05, 0.00083904783241450787, 0.0011438585352152586, 0.00026202050503343344, 5.5564243666594848e-05, 0.00012956403952557594, 9.4522743893321604e-05, 0.00011600718426052481, 0.00017986078455578536, 0.0001168238595710136, 0.00046620276407338679, 0.00019365246407687664, 9.0592082415241748e-05, 0.0002607163623906672, 7.8813754953444004e-05, 7.4412273534107953e-05, 0.00031684612622484565, 0.00027879743720404804, 0.00011022061516996473, 0.00020446497364901006, 8.8604661868885159e-05, 0.00023024693655315787, 0.00011168835771968588, 0.00035191586357541382, 8.7739725131541491e-05, 0.00023371819406747818, 8.3671555330511183e-05, 0.00075348693644627929, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -17,-88,-99,72,-80,10,-93,-82,51,56,86,-39,-2,13,-89,-76,97,-80,24,-49,-8,-106,-42,-78,86,96,-2,-105,6,-59,61,83,48,65,65,16,86,100,28,16,-126,-7,28,38,-51,87,-46,-96, 84,-6,32,84,-121,50,-64,10,86,120,114,61,-18,-77,-127,-109,127,-34,105,-89,-100,127,127,29,127,91,39,-109,-73,-67,-109,113,97,127,97,106,-21,89,54,-72,-96,-83,17,-59,-69,66,-52,103, 105,-6,51,63,-72,19,-23,-8,17,85,6,-33,-82,0,-61,-54,41,86,49,-14,-43,-23,-86,59,38,28,19,-33,-2,-46,25,49,42,96,13,66,-1,19,44,-6,-60,-1,3,10,-23,98,-15,-4, 
  /* [0][1][][] */ 46,-127,109,81,97,-68,-127,-127,114,59,96,-51,4,-1,-104,-99,95,127,38,-106,-31,114,28,-127,104,126,103,-123,-7,-127,-77,94,110,-3,99,47,31,120,57,5,-15,-18,82,92,-109,127,-113,113, 127,-6,-1,127,127,-127,-110,3,127,127,127,59,-39,-127,-120,-127,120,64,127,-127,-127,-122,-112,40,104,127,127,-127,-127,-120,127,127,127,5,127,127,-6,127,127,-127,6,-127,119,-87,-127,108,-117,-127, 98,-10,-127,61,93,-57,-40,-13,19,64,16,-20,-127,-4,-30,-36,39,-88,68,-39,-60,13,80,62,53,54,-2,-51,-14,-97,-40,30,44,-4,24,68,7,13,76,-2,-23,-4,35,-12,-65,82,-54,12, 
  /* [0][2][][] */ 62,-80,7,21,2,72,-85,-81,32,0,26,63,6,13,-43,-48,21,-37,11,-68,-8,4,12,-81,34,36,66,-9,7,-109,17,19,73,-78,62,15,-127,19,5,2,23,-6,91,-127,-87,57,-85,-8, 49,8,5,54,11,99,-41,-2,21,57,18,-127,-21,-89,-28,-50,40,-12,49,-90,-38,-11,-25,25,41,54,76,-38,-74,-114,-27,15,72,-84,61,26,22,48,65,-49,127,-64,127,99,-121,48,-127,22, -35,-12,-6,41,-16,45,-7,-11,0,23,-40,48,-69,3,-15,-9,4,28,25,-8,-25,25,23,24,31,43,17,12,-6,-63,16,-7,10,-41,8,15,16,-34,41,10,67,3,32,-10,-41,55,-32,0, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0037862891331315041, 0.0056611127220094204, 0.026394644752144814, 0.0034114399459213018, 0.020154012367129326, 0.027553614228963852, 0.0055054784752428532, 0.0076912958174943924, 0.002841202775016427, 0.008663536049425602, 0.020582834258675575, 0.010766743682324886, 0.0079457880929112434, 0.0063780476339161396, 0.0024907679762691259, 0.0021918946877121925, 0.0049604615196585655, 0.020811539143323898, 0.0025402484461665154, 0.0035484633408486843, 0.0028075866866856813, 0.035659532994031906, 0.048613987863063812, 0.011135871522128582, 0.0023614803794771433, 0.0055064712651073933, 0.004017216619104147, 0.0049303052946925163, 0.0076440833508968353, 0.004965013824403286, 0.019813617691397667, 0.008230229839682579, 0.0038501634262502193, 0.011080445721745491, 0.0033495845273137093, 0.0031625216361135244, 0.013465960510075092, 0.011848891153931618, 0.0046843760646879673, 0.0086897611618041992, 0.0037656980566680431, 0.0097854947671294212, 0.0047467551194131374, 0.01495642401278019, 0.0037289382889866829, 0.0099330227822065353, 0.0035560410469770432, 0.032023195177316666, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 10666, 4698, 13455, 2088, 3411, 3384, -3876, 3958, 2468, -2311, -2608, 4454, -2960, -4860, 8542, 1409, -1930, 2216, -1468, 3147, 207, 4992, 1236, -1864, -299, -4539, 2814, -3367, 3557, 6998, 359, 494, 7113, 10333, 8416, 4562, 5259, -4182, 1165, 4413, -658, -4185, 3720, 1933, 433, -5962, -11075, 2452, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00044302493915893137, 0.00056752236559987068, 8.695312135387212e-05, 0.00084195565432310104, 0.00063221727032214403, 0.00057700264733284712, 0.0019931276328861713, 0.0010780834127217531, 0.0011282294290140271, 0.0005684235948137939, 0.00015738535148557276, 0.00055485917255282402, 0.00046659796498715878, 0.0011347574181854725, 0.00053512019803747535, 0.0016695866361260414, 0.0010439491597935557, 0.00033498671837151051, 0.0012146360240876675, 0.0018748820293694735, 0.00080421322491019964, 0.00034775873064063489, 0.0001282802113564685, 0.00044832291314378381, 0.0011715411674231291, 0.00086342752911150455, 0.0010499884374439716, 0.00046649784781038761, 0.0010566480923444033, 0.00072454632027074695, 0.00032559173996560276, 0.00056245620362460613, 0.00079983199248090386, 0.0002706064551603049, 0.00042015896178781986, 0.00035380528424866498, 0.00053781131282448769, 0.0016391674289479852, 0.00056280114222317934, 0.00058753276243805885, 0.0015571722760796547, 0.00062226312002167106, 0.00080287136370316148, 0.00024119795125443488, 0.0015210441779345274, 0.00077371520455926657, 0.00066790066193789244, 0.00046270401799120009, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -106,-102,24,-127,-57,-6,-5,-5, 
  /* [1][0][][] */ -127,-18,93,-5,-56,28,3,18, 
  /* [2][0][][] */ 21,-6,19,127,25,-25,-16,-7, 
  /* [3][0][][] */ -106,-73,-28,-13,44,127,-47,-33, 
  /* [4][0][][] */ -6,-25,-11,-3,-11,3,-127,-67, 
  /* [5][0][][] */ -2,-29,-17,-7,-7,12,-127,-70, 
  /* [6][0][][] */ 127,6,17,-12,-67,18,4,-5, 
  /* [7][0][][] */ -127,-28,-15,8,66,15,0,11, 
  /* [8][0][][] */ 23,40,-10,-7,-30,-127,39,19, 
  /* [9][0][][] */ 72,24,-15,-12,-25,-2,-8,127, 
  /* [10][0][][] */ 110,-5,-114,2,-89,-12,38,127, 
  /* [11][0][][] */ -127,101,6,-32,74,-61,5,28, 
  /* [12][0][][] */ 127,-35,-104,10,54,-5,-6,-24, 
  /* [13][0][][] */ 127,14,10,-12,-30,36,12,-12, 
  /* [14][0][][] */ -126,-91,108,-33,77,-34,-49,-127, 
  /* [15][0][][] */ 35,80,5,-3,-8,-127,-20,8, 
  /* [16][0][][] */ -11,-66,11,4,12,127,11,6, 
  /* [17][0][][] */ 33,-124,-77,-10,-36,127,-61,-14, 
  /* [18][0][][] */ 41,-22,-17,-20,-20,25,127,-14, 
  /* [19][0][][] */ -4,21,-4,-127,-12,34,-7,-7, 
  /* [20][0][][] */ -87,-35,82,11,55,108,-6,-127, 
  /* [21][0][][] */ -21,-4,32,-28,-17,10,-127,-82, 
  /* [22][0][][] */ 70,-7,7,127,-14,-9,55,40, 
  /* [23][0][][] */ 127,-18,-124,-17,33,-33,5,8, 
  /* [24][0][][] */ -33,23,29,31,11,1,-127,-88, 
  /* [25][0][][] */ 127,13,-89,7,13,-6,6,29, 
  /* [26][0][][] */ 2,48,-33,-127,-27,18,-2,0, 
  /* [27][0][][] */ 127,17,-102,-4,-103,41,18,83, 
  /* [28][0][][] */ -127,-24,-23,17,55,13,1,33, 
  /* [29][0][][] */ -5,-127,-20,-117,-12,32,-19,-17, 
  /* [30][0][][] */ 3,86,127,34,43,-102,108,37, 
  /* [31][0][][] */ -75,-8,-127,43,-3,-20,95,104, 
  /* [32][0][][] */ -4,-120,5,-127,-12,12,-8,-18, 
  /* [33][0][][] */ 17,-127,-6,-122,11,13,6,-29, 
  /* [34][0][][] */ -27,-54,32,-101,37,-61,127,87, 
  /* [35][0][][] */ -127,8,46,-1,-117,-19,34,101, 
  /* [36][0][][] */ -127,9,118,-6,-41,20,-27,30, 
  /* [37][0][][] */ 127,12,-3,-8,-77,17,-1,16, 
  /* [38][0][][] */ -77,-2,79,37,69,-59,49,127, 
  /* [39][0][][] */ -127,-8,68,-1,-75,19,-7,8, 
  /* [40][0][][] */ -8,29,44,-19,25,-6,127,49, 
  /* [41][0][][] */ 127,-14,-75,1,53,15,5,-6, 
  /* [42][0][][] */ -14,-127,32,-7,15,11,-4,-17, 
  /* [43][0][][] */ 10,118,127,-14,62,-108,79,6, 
  /* [44][0][][] */ 4,-13,5,110,2,-127,3,-1, 
  /* [45][0][][] */ 127,-28,37,-9,-61,102,7,1, 
  /* [46][0][][] */ 16,124,-22,99,-2,127,24,45, 
  /* [47][0][][] */ -11,35,12,-32,26,-37,127,68, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00533326156437397, 0.0068319970741868019, 0.0010467666434124112, 0.010135703720152378, 0.0076108132489025593, 0.0069461236707866192, 0.023993842303752899, 0.01297827810049057, 0.013581950217485428, 0.0068428465165197849, 0.001894650049507618, 0.0066795540042221546, 0.0056170402094721794, 0.013660536147654057, 0.0064419303089380264, 0.020098963752388954, 0.012567359022796154, 0.0040326663292944431, 0.014622136950492859, 0.022570367902517319, 0.0096813496202230453, 0.0041864193044602871, 0.0015442740404978395, 0.0053970399312674999, 0.01410334836691618, 0.010394188575446606, 0.012640061788260937, 0.005615835078060627, 0.012720232829451561, 0.008722296915948391, 0.0039195669814944267, 0.00677100894972682, 0.0096286069601774216, 0.0032576380763202906, 0.0050579942762851715, 0.0042592096142470837, 0.0064743268303573132, 0.019732767716050148, 0.0067751617170870304, 0.0070728883147239685, 0.018745686858892441, 0.0074909823015332222, 0.0096651958301663399, 0.0029036102350801229, 0.018310766667127609, 0.0093142054975032806, 0.0080403797328472137, 0.0055701639503240585, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 4059, -4905, -360, 2947, 2424, 659, -3073, 3043, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 6.3879713707137853e-05, 0.00013822157052345574, 9.8182725196238607e-05, 6.5526124672032893e-05, 0.00013042984937783331, 0.00019614107441157103, 0.00010027907410403714, 0.00018753625045064837, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -23,1,-51,-32,-19,42,-127,-11, 
  /* [1][0][][] */ 20,96,0,127,10,-3,-9,-35, 
  /* [2][0][][] */ 127,-7,-30,-58,-62,48,91,-52, 
  /* [3][0][][] */ 17,-127,51,-78,23,-87,31,55, 
  /* [4][0][][] */ 117,-9,-57,-11,25,-7,-127,-45, 
  /* [5][0][][] */ 2,-32,4,36,3,-127,-1,8, 
  /* [6][0][][] */ 127,-30,114,-3,106,-32,-4,9, 
  /* [7][0][][] */ -127,-2,-94,-4,-101,3,34,9, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0027148877270519733, 0.0058744163252413273, 0.0041727656498551369, 0.0027848603203892708, 0.0055432682856917381, 0.0083359954878687859, 0.0042618606239557266, 0.0079702902585268021, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { -11314, 10961, 493, -12391, -298, -14620, 104, 91, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00028993727755732834, 0.00039420716348104179, 0.00024201386258937418, 0.00037539791082963347, 0.00026836086180992424, 0.00037738634273409843, 0.001399574801325798, 0.0029533607885241508, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ 1,1,15,15,6,2,9,34, 8,4,-37,127,-27,4,-3,33, -4,2,-10,23,-1,4,-5,25, 
  /* [0][1][][] */ -2,-3,127,-29,127,0,-111,44, 127,-127,-101,3,-95,127,-14,-127, -28,3,17,-22,-3,2,127,41, 
  /* [0][2][][] */ 3,1,6,1,8,-1,16,35, 6,3,-48,-1,-19,3,-9,-103, -7,-1,-7,4,-2,-1,-5,41, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.012322334572672844, 0.016753803938627243, 0.010285588912665844, 0.015954410657286644, 0.011405336670577526, 0.016038918867707253, 0.059481929987668991, 0.1255178302526474, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 11560, 8531, -150, 27860, 2117, 6823, 87304, 2107, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 0.00021289395226631314, 0.00026038446230813861, 0.00017253594705834985, 9.75227594608441e-05, 0.00029027089476585388, 0.00036108351196162403, 1.0842726624105126e-05, 3.6418579838937148e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*1] = { 
  /* [0][0][][] */ -57, 50, 9, 
  /* [0][1][][] */ -127, 122, 0, 
  /* [0][2][][] */ -42, 47, 0, 
  /* [1][0][][] */ 57, 127, 35, 
  /* [1][1][][] */ -68, -79, -44, 
  /* [1][2][][] */ 7, -42, 5, 
  /* [2][0][][] */ 31, 28, -46, 
  /* [2][1][][] */ 52, 70, -127, 
  /* [2][2][][] */ 21, 32, -58, 
  /* [3][0][][] */ 42, 53, 20, 
  /* [3][1][][] */ 53, 74, 26, 
  /* [3][2][][] */ -80, -127, -57, 
  /* [4][0][][] */ 4, -53, 47, 
  /* [4][1][][] */ 16, -127, 112, 
  /* [4][2][][] */ 5, -37, 32, 
  /* [5][0][][] */ 2, -56, 0, 
  /* [5][1][][] */ -1, 127, 2, 
  /* [5][2][][] */ 1, -75, 0, 
  /* [6][0][][] */ -18, -88, 0, 
  /* [6][1][][] */ -29, -127, -1, 
  /* [6][2][][] */ -15, -48, 11, 
  /* [7][0][][] */ 44, -127, 30, 
  /* [7][1][][] */ -19, -3, -12, 
  /* [7][2][][] */ -23, 75, -12, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant43_scale = { 8, { 0.054287955164909363, 0.066398032009601593, 0.043996665626764297, 0.024868302047252655, 0.074019074440002441, 0.092076286673545837, 0.0027648950926959515, 0.0092867370694875717, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.071573294699192047, } };
const TfArray<1, int> quant46_zero = { 1, { 26 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.083068296313285828, } };
const TfArray<1, int> quant47_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.053906697779893875, } };
const TfArray<1, int> quant51_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.11387725174427032, } };
const TfArray<1, int> quant54_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.10578005015850067, } };
const TfArray<1, int> quant55_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.054313831031322479, } };
const TfArray<1, int> quant59_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.022163763642311096, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.042956307530403137, } };
const TfArray<1, int> quant62_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.062217600643634796, } };
const TfArray<1, int> quant63_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.043235089629888535, } };
const TfArray<1, int> quant66_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.082778915762901306, } };
const TfArray<1, int> quant67_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.026023920625448227, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.069898560643196106, } };
const TfArray<1, int> quant70_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 18432), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14976), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8064), (TfLiteIntArray*)&g0::tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
